/*
 * Nudr_GroupIDmap
 *
 * Unified Data Repository Service for NF-Group ID retrieval.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.504 V17.7.0; 5G System; Unified Data Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.504/
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package GroupIDmap

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type NFGroupIDsDocumentApiService service

/*
NFGroupIDsDocumentApiService Retrieves NF-Group IDs for provided Subscriber and NF types
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param NfType - Type of NF
 * @param SubscriberId - Identifier of the subscriber

@return GetNfGroupIDsResponse
*/

// GetNfGroupIDsRequest
type GetNfGroupIDsRequest struct {
	NfType       []models.NrfNfManagementNfType
	SubscriberId *string
}

func (r *GetNfGroupIDsRequest) SetNfType(NfType []models.NrfNfManagementNfType) {
	r.NfType = NfType
}
func (r *GetNfGroupIDsRequest) SetSubscriberId(SubscriberId string) {
	r.SubscriberId = &SubscriberId
}

type GetNfGroupIDsResponse struct {
	GetNfGroupIDsResponse200 map[string]string
}

type GetNfGroupIDsError struct {
	ProblemDetails models.ProblemDetails
}

func (a *NFGroupIDsDocumentApiService) GetNfGroupIDs(ctx context.Context, request *GetNfGroupIDsRequest) (*GetNfGroupIDsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetNfGroupIDsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/nf-group-ids"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.NfType == nil {
		return nil, openapi.ReportError("NfType must be non nil")
	} else {
		if len(request.NfType) < 1 {
			return &localVarReturnValue, openapi.ReportError("NfType must have at least 1 elements")
		}
		localVarQueryParams.Add("nf-type", openapi.ParameterToString(request.NfType, "csv"))
	}
	if request.SubscriberId == nil {
		return nil, openapi.ReportError("SubscriberId must be non nil")
	} else {
		localVarQueryParams.Add("subscriberId", openapi.ParameterToString(request.SubscriberId, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.GetNfGroupIDsResponse200, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 404:
		var v GetNfGroupIDsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
