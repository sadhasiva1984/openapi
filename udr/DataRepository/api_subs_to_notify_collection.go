/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.504 V17.12.0; 5G System; Unified Data Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.504/
 *
 * API version: 2.2.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type SubsToNotifyCollectionApiService service

/*
SubsToNotifyCollectionApiService Retrieves the list of subscriptions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId - UE id
 * @param SupportedFeatures - Supported Features

@return QuerySubsToNotifyResponse
*/

// QuerySubsToNotifyRequest
type QuerySubsToNotifyRequest struct {
	UeId              *string
	SupportedFeatures *string
}

func (r *QuerySubsToNotifyRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *QuerySubsToNotifyRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type QuerySubsToNotifyResponse struct {
	SubscriptionDataSubscriptions []models.SubscriptionDataSubscriptions
}

type QuerySubsToNotifyError struct {
}

func (a *SubsToNotifyCollectionApiService) QuerySubsToNotify(ctx context.Context, request *QuerySubsToNotifyRequest) (*QuerySubsToNotifyResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QuerySubsToNotifyResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.UeId == nil {
		return nil, openapi.ReportError("UeId must be non nil")
	} else {
		localVarQueryParams.Add("ue-id", openapi.ParameterToString(request.UeId, "multi"))
	}
	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.SubscriptionDataSubscriptions, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SubsToNotifyCollectionApiService Deletes subscriptions identified by a given ue-id parameter
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId - UE ID
 * @param NfInstanceId - NF Instance ID
 * @param DeleteAllNfs - Flag to delete subscriptions from all NFs
 * @param ImplicitUnsubscribeIndication - Implicit Unsubscribe Indication

@return RemoveMultipleSubscriptionDataSubscriptionsResponse
*/

// RemoveMultipleSubscriptionDataSubscriptionsRequest
type RemoveMultipleSubscriptionDataSubscriptionsRequest struct {
	UeId                          *string
	NfInstanceId                  *string
	DeleteAllNfs                  *bool
	ImplicitUnsubscribeIndication *bool
}

func (r *RemoveMultipleSubscriptionDataSubscriptionsRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *RemoveMultipleSubscriptionDataSubscriptionsRequest) SetNfInstanceId(NfInstanceId string) {
	r.NfInstanceId = &NfInstanceId
}
func (r *RemoveMultipleSubscriptionDataSubscriptionsRequest) SetDeleteAllNfs(DeleteAllNfs bool) {
	r.DeleteAllNfs = &DeleteAllNfs
}
func (r *RemoveMultipleSubscriptionDataSubscriptionsRequest) SetImplicitUnsubscribeIndication(ImplicitUnsubscribeIndication bool) {
	r.ImplicitUnsubscribeIndication = &ImplicitUnsubscribeIndication
}

type RemoveMultipleSubscriptionDataSubscriptionsResponse struct {
}

type RemoveMultipleSubscriptionDataSubscriptionsError struct {
}

func (a *SubsToNotifyCollectionApiService) RemoveMultipleSubscriptionDataSubscriptions(ctx context.Context, request *RemoveMultipleSubscriptionDataSubscriptionsRequest) (*RemoveMultipleSubscriptionDataSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoveMultipleSubscriptionDataSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.UeId == nil {
		return nil, openapi.ReportError("UeId must be non nil")
	} else {
		localVarQueryParams.Add("ue-id", openapi.ParameterToString(request.UeId, "multi"))
	}
	if request.NfInstanceId != nil {
		localVarQueryParams.Add("nf-instance-id", openapi.ParameterToString(request.NfInstanceId, "multi"))
	}
	if request.DeleteAllNfs != nil {
		localVarQueryParams.Add("delete-all-nfs", openapi.ParameterToString(request.DeleteAllNfs, "multi"))
	}
	if request.ImplicitUnsubscribeIndication != nil {
		localVarQueryParams.Add("implicit-unsubscribe-indication", openapi.ParameterToString(request.ImplicitUnsubscribeIndication, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SubsToNotifyCollectionApiService Subscription data subscriptions
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param SubscriptionDataSubscriptions -

@return SubscriptionDataSubscriptionsResponse
*/

// SubscriptionDataSubscriptionsRequest
type SubscriptionDataSubscriptionsRequest struct {
	SubscriptionDataSubscriptions *models.SubscriptionDataSubscriptions
}

func (r *SubscriptionDataSubscriptionsRequest) SetSubscriptionDataSubscriptions(SubscriptionDataSubscriptions models.SubscriptionDataSubscriptions) {
	r.SubscriptionDataSubscriptions = &SubscriptionDataSubscriptions
}

type SubscriptionDataSubscriptionsResponse struct {
	Location                      string
	SubscriptionDataSubscriptions models.SubscriptionDataSubscriptions
}

type SubscriptionDataSubscriptionsError struct {
}

func (a *SubsToNotifyCollectionApiService) SubscriptionDataSubscriptions(ctx context.Context, request *SubscriptionDataSubscriptionsRequest) (*SubscriptionDataSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SubscriptionDataSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/subs-to-notify"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.SubscriptionDataSubscriptions

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 201:
		err = openapi.Deserialize(&localVarReturnValue.SubscriptionDataSubscriptions, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.Location = localVarHTTPResponse.Header.Get("Location")
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

// SubscriptionDataSubscriptionsOnDataChangePostRequest
type SubscriptionDataSubscriptionsOnDataChangePostRequest struct {
	DataChangeNotify *models.DataChangeNotify
}

func (r *SubscriptionDataSubscriptionsOnDataChangePostRequest) SetDataChangeNotify(DataChangeNotify models.DataChangeNotify) {
	r.DataChangeNotify = &DataChangeNotify
}

type SubscriptionDataSubscriptionsOnDataChangePostResponse struct {
}

type SubscriptionDataSubscriptionsOnDataChangePostError struct {
}

func (a *SubsToNotifyCollectionApiService) SubscriptionDataSubscriptionsOnDataChangePost(ctx context.Context, uri string, request *SubscriptionDataSubscriptionsOnDataChangePostRequest) (*SubscriptionDataSubscriptionsOnDataChangePostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("POST")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SubscriptionDataSubscriptionsOnDataChangePostResponse
	)

	// create path and map variables
	localVarPath := uri

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.DataChangeNotify

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	default:
		return &localVarReturnValue, apiError
	}
}
