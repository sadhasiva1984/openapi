/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.504 V17.12.0; 5G System; Unified Data Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.504/
 *
 * API version: 2.2.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type EventExposureGroupSubscriptionDocumentApiService service

/*
EventExposureGroupSubscriptionDocumentApiService Modify an individual ee subscription for a group of a UEs
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId -
 * @param PatchItem -
 * @param SupportedFeatures - Features required to be supported by the target NF

@return ModifyEeGroupSubscriptionResponse
*/

// ModifyEeGroupSubscriptionRequest
type ModifyEeGroupSubscriptionRequest struct {
	UeGroupId         *string
	SubsId            *string
	PatchItem         []models.PatchItem
	SupportedFeatures *string
}

func (r *ModifyEeGroupSubscriptionRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *ModifyEeGroupSubscriptionRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}
func (r *ModifyEeGroupSubscriptionRequest) SetPatchItem(PatchItem []models.PatchItem) {
	r.PatchItem = PatchItem
}
func (r *ModifyEeGroupSubscriptionRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type ModifyEeGroupSubscriptionResponse struct {
	PatchResult models.PatchResult
}

type ModifyEeGroupSubscriptionError struct {
	ProblemDetails models.ProblemDetails
}

func (a *EventExposureGroupSubscriptionDocumentApiService) ModifyEeGroupSubscription(ctx context.Context, request *ModifyEeGroupSubscriptionRequest) (*ModifyEeGroupSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Patch")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ModifyEeGroupSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.PatchItem

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.PatchResult, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 403:
		var v ModifyEeGroupSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v ModifyEeGroupSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
EventExposureGroupSubscriptionDocumentApiService Retrieve a individual eeSubscription for a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId - Unique ID of the subscription to remove

@return QueryEeGroupSubscriptionResponse
*/

// QueryEeGroupSubscriptionRequest
type QueryEeGroupSubscriptionRequest struct {
	UeGroupId *string
	SubsId    *string
}

func (r *QueryEeGroupSubscriptionRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *QueryEeGroupSubscriptionRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type QueryEeGroupSubscriptionResponse struct {
	QueryEeGroupSubscriptionResponse200 map[string]interface{}
}

type QueryEeGroupSubscriptionError struct {
}

func (a *EventExposureGroupSubscriptionDocumentApiService) QueryEeGroupSubscription(ctx context.Context, request *QueryEeGroupSubscriptionRequest) (*QueryEeGroupSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  QueryEeGroupSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.QueryEeGroupSubscriptionResponse200, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
EventExposureGroupSubscriptionDocumentApiService Deletes a eeSubscription for a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId - Unique ID of the subscription to remove

@return RemoveEeGroupSubscriptionsResponse
*/

// RemoveEeGroupSubscriptionsRequest
type RemoveEeGroupSubscriptionsRequest struct {
	UeGroupId *string
	SubsId    *string
}

func (r *RemoveEeGroupSubscriptionsRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *RemoveEeGroupSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type RemoveEeGroupSubscriptionsResponse struct {
}

type RemoveEeGroupSubscriptionsError struct {
}

func (a *EventExposureGroupSubscriptionDocumentApiService) RemoveEeGroupSubscriptions(ctx context.Context, request *RemoveEeGroupSubscriptionsRequest) (*RemoveEeGroupSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoveEeGroupSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
EventExposureGroupSubscriptionDocumentApiService Update an individual ee subscription of a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId -
 * @param Body -

@return UpdateEeGroupSubscriptionsResponse
*/

// UpdateEeGroupSubscriptionsRequest
type UpdateEeGroupSubscriptionsRequest struct {
	UeGroupId *string
	SubsId    *string
	Body      *models.UdmEeEeSubscription
}

func (r *UpdateEeGroupSubscriptionsRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *UpdateEeGroupSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}
func (r *UpdateEeGroupSubscriptionsRequest) SetBody(Body models.UdmEeEeSubscription) {
	r.Body = &Body
}

type UpdateEeGroupSubscriptionsResponse struct {
}

type UpdateEeGroupSubscriptionsError struct {
	ProblemDetails models.ProblemDetails
}

func (a *EventExposureGroupSubscriptionDocumentApiService) UpdateEeGroupSubscriptions(ctx context.Context, request *UpdateEeGroupSubscriptionsRequest) (*UpdateEeGroupSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateEeGroupSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.Body

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 404:
		var v UpdateEeGroupSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
