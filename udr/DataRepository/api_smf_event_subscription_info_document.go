/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.504 V17.12.0; 5G System; Unified Data Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.504/
 *
 * API version: 2.2.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type SMFEventSubscriptionInfoDocumentApiService service

/*
SMFEventSubscriptionInfoDocumentApiService Create SMF Subscription Info
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId -
 * @param SubsId -
 * @param SmfSubscriptionInfo -

@return CreateSMFSubscriptionsResponse
*/

// CreateSMFSubscriptionsRequest
type CreateSMFSubscriptionsRequest struct {
	UeId                *string
	SubsId              *string
	SmfSubscriptionInfo *models.SmfSubscriptionInfo
}

func (r *CreateSMFSubscriptionsRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *CreateSMFSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}
func (r *CreateSMFSubscriptionsRequest) SetSmfSubscriptionInfo(SmfSubscriptionInfo models.SmfSubscriptionInfo) {
	r.SmfSubscriptionInfo = &SmfSubscriptionInfo
}

type CreateSMFSubscriptionsResponse struct {
	SmfSubscriptionInfo models.SmfSubscriptionInfo
}

type CreateSMFSubscriptionsError struct {
}

func (a *SMFEventSubscriptionInfoDocumentApiService) CreateSMFSubscriptions(ctx context.Context, request *CreateSMFSubscriptionsRequest) (*CreateSMFSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateSMFSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", openapi.StringOfValue(*request.UeId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.SmfSubscriptionInfo

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 201:
		err = openapi.Deserialize(&localVarReturnValue.SmfSubscriptionInfo, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Retrieve SMF Subscription Info for a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId -

@return GetSmfGroupSubscriptionsResponse
*/

// GetSmfGroupSubscriptionsRequest
type GetSmfGroupSubscriptionsRequest struct {
	UeGroupId *string
	SubsId    *string
}

func (r *GetSmfGroupSubscriptionsRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *GetSmfGroupSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type GetSmfGroupSubscriptionsResponse struct {
	SmfSubscriptionInfo models.SmfSubscriptionInfo
}

type GetSmfGroupSubscriptionsError struct {
}

func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfGroupSubscriptions(ctx context.Context, request *GetSmfGroupSubscriptionsRequest) (*GetSmfGroupSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetSmfGroupSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.SmfSubscriptionInfo, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Retrieve SMF Subscription Info
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId -
 * @param SubsId -

@return GetSmfSubscriptionInfoResponse
*/

// GetSmfSubscriptionInfoRequest
type GetSmfSubscriptionInfoRequest struct {
	UeId   *string
	SubsId *string
}

func (r *GetSmfSubscriptionInfoRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *GetSmfSubscriptionInfoRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type GetSmfSubscriptionInfoResponse struct {
	SmfSubscriptionInfo models.SmfSubscriptionInfo
}

type GetSmfSubscriptionInfoError struct {
}

func (a *SMFEventSubscriptionInfoDocumentApiService) GetSmfSubscriptionInfo(ctx context.Context, request *GetSmfSubscriptionInfoRequest) (*GetSmfSubscriptionInfoResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetSmfSubscriptionInfoResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", openapi.StringOfValue(*request.UeId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.SmfSubscriptionInfo, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Modify SMF Subscription Info for a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId -
 * @param PatchItem -
 * @param SupportedFeatures - Features required to be supported by the target NF

@return ModifySmfGroupSubscriptionsResponse
*/

// ModifySmfGroupSubscriptionsRequest
type ModifySmfGroupSubscriptionsRequest struct {
	UeGroupId         *string
	SubsId            *string
	PatchItem         []models.PatchItem
	SupportedFeatures *string
}

func (r *ModifySmfGroupSubscriptionsRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *ModifySmfGroupSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}
func (r *ModifySmfGroupSubscriptionsRequest) SetPatchItem(PatchItem []models.PatchItem) {
	r.PatchItem = PatchItem
}
func (r *ModifySmfGroupSubscriptionsRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type ModifySmfGroupSubscriptionsResponse struct {
	PatchResult models.PatchResult
}

type ModifySmfGroupSubscriptionsError struct {
	ProblemDetails models.ProblemDetails
}

func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfGroupSubscriptions(ctx context.Context, request *ModifySmfGroupSubscriptionsRequest) (*ModifySmfGroupSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Patch")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ModifySmfGroupSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.PatchItem

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.PatchResult, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 403:
		var v ModifySmfGroupSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Modify SMF Subscription Info
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId -
 * @param SubsId -
 * @param PatchItem -
 * @param SupportedFeatures - Features required to be supported by the target NF

@return ModifySmfSubscriptionInfoResponse
*/

// ModifySmfSubscriptionInfoRequest
type ModifySmfSubscriptionInfoRequest struct {
	UeId              *string
	SubsId            *string
	PatchItem         []models.PatchItem
	SupportedFeatures *string
}

func (r *ModifySmfSubscriptionInfoRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *ModifySmfSubscriptionInfoRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}
func (r *ModifySmfSubscriptionInfoRequest) SetPatchItem(PatchItem []models.PatchItem) {
	r.PatchItem = PatchItem
}
func (r *ModifySmfSubscriptionInfoRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type ModifySmfSubscriptionInfoResponse struct {
	PatchResult models.PatchResult
}

type ModifySmfSubscriptionInfoError struct {
	ProblemDetails models.ProblemDetails
}

func (a *SMFEventSubscriptionInfoDocumentApiService) ModifySmfSubscriptionInfo(ctx context.Context, request *ModifySmfSubscriptionInfoRequest) (*ModifySmfSubscriptionInfoResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Patch")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ModifySmfSubscriptionInfoResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", openapi.StringOfValue(*request.UeId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.PatchItem

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.PatchResult, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 403:
		var v ModifySmfSubscriptionInfoError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Delete SMF Subscription Info for a group of UEs or any UE
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeGroupId -
 * @param SubsId -

@return RemoveSmfGroupSubscriptionsResponse
*/

// RemoveSmfGroupSubscriptionsRequest
type RemoveSmfGroupSubscriptionsRequest struct {
	UeGroupId *string
	SubsId    *string
}

func (r *RemoveSmfGroupSubscriptionsRequest) SetUeGroupId(UeGroupId string) {
	r.UeGroupId = &UeGroupId
}
func (r *RemoveSmfGroupSubscriptionsRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type RemoveSmfGroupSubscriptionsResponse struct {
}

type RemoveSmfGroupSubscriptionsError struct {
}

func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfGroupSubscriptions(ctx context.Context, request *RemoveSmfGroupSubscriptionsRequest) (*RemoveSmfGroupSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoveSmfGroupSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/group-data/{ueGroupId}/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueGroupId"+"}", openapi.StringOfValue(*request.UeGroupId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}

/*
SMFEventSubscriptionInfoDocumentApiService Delete SMF Subscription Info
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param UeId -
 * @param SubsId -

@return RemoveSmfSubscriptionsInfoResponse
*/

// RemoveSmfSubscriptionsInfoRequest
type RemoveSmfSubscriptionsInfoRequest struct {
	UeId   *string
	SubsId *string
}

func (r *RemoveSmfSubscriptionsInfoRequest) SetUeId(UeId string) {
	r.UeId = &UeId
}
func (r *RemoveSmfSubscriptionsInfoRequest) SetSubsId(SubsId string) {
	r.SubsId = &SubsId
}

type RemoveSmfSubscriptionsInfoResponse struct {
}

type RemoveSmfSubscriptionsInfoError struct {
}

func (a *SMFEventSubscriptionInfoDocumentApiService) RemoveSmfSubscriptionsInfo(ctx context.Context, request *RemoveSmfSubscriptionsInfoRequest) (*RemoveSmfSubscriptionsInfoResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoveSmfSubscriptionsInfoResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/subscription-data/{ueId}/context-data/ee-subscriptions/{subsId}/smf-subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"ueId"+"}", openapi.StringOfValue(*request.UeId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subsId"+"}", openapi.StringOfValue(*request.SubsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	default:
		return nil, apiError
	}
}
