/*
 * Nudr_DataRepository API OpenAPI file
 *
 * Unified Data Repository Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.504 V17.12.0; 5G System; Unified Data Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.504/
 *
 * API version: 2.2.4
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type BdtPolicyDataStoreApiService service

/*
BdtPolicyDataStoreApiService Retrieve applied BDT Policy Data
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param BdtPolicyIds - Each element identifies a service.
 * @param InternalGroupIds - Each element identifies a group of users.
 * @param Supis - Each element identifies the user.

@return ReadBdtPolicyDataResponse
*/

// ReadBdtPolicyDataRequest
type ReadBdtPolicyDataRequest struct {
	BdtPolicyIds     []string
	InternalGroupIds []string
	Supis            []string
}

func (r *ReadBdtPolicyDataRequest) SetBdtPolicyIds(BdtPolicyIds []string) {
	r.BdtPolicyIds = BdtPolicyIds
}
func (r *ReadBdtPolicyDataRequest) SetInternalGroupIds(InternalGroupIds []string) {
	r.InternalGroupIds = InternalGroupIds
}
func (r *ReadBdtPolicyDataRequest) SetSupis(Supis []string) {
	r.Supis = Supis
}

type ReadBdtPolicyDataResponse struct {
	BdtPolicyData []models.BdtPolicyData
}

type ReadBdtPolicyDataError struct {
	ProblemDetails models.ProblemDetails
}

func (a *BdtPolicyDataStoreApiService) ReadBdtPolicyData(ctx context.Context, request *ReadBdtPolicyDataRequest) (*ReadBdtPolicyDataResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ReadBdtPolicyDataResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/application-data/bdtPolicyData"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.BdtPolicyIds != nil {
		if len(request.BdtPolicyIds) < 1 {
			return &localVarReturnValue, openapi.ReportError("BdtPolicyIds must have at least 1 elements")
		}
		localVarQueryParams.Add("bdt-policy-ids", openapi.ParameterToString(request.BdtPolicyIds, "multi"))
	}
	if request.InternalGroupIds != nil {
		if len(request.InternalGroupIds) < 1 {
			return &localVarReturnValue, openapi.ReportError("InternalGroupIds must have at least 1 elements")
		}
		localVarQueryParams.Add("internal-group-ids", openapi.ParameterToString(request.InternalGroupIds, "multi"))
	}
	if request.Supis != nil {
		if len(request.Supis) < 1 {
			return &localVarReturnValue, openapi.ReportError("Supis must have at least 1 elements")
		}
		localVarQueryParams.Add("supis", openapi.ParameterToString(request.Supis, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.BdtPolicyData, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 400:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 406:
		return &localVarReturnValue, nil
	case 414:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v ReadBdtPolicyDataError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
