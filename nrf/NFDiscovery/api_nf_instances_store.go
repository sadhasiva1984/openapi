/*
 * NRF NFDiscovery Service
 *
 * NRF NFDiscovery Service.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.510 V17.12.0; 5G System; Network Function Repository Services; Stage 3
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.510/
 *
 * API version: 1.2.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package NFDiscovery

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type NFInstancesStoreApiService service

/*
NFInstancesStoreApiService Search a collection of NF Instances
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param TargetNfType - Type of the target NF
 * @param RequesterNfType - Type of the requester NF
 * @param AcceptEncoding - Accept-Encoding, described in IETF RFC 7231
 * @param PreferredCollocatedNfTypes - collocated NF types that candidate NFs should preferentially support
 * @param RequesterNfInstanceId - NfInstanceId of the requester NF
 * @param ServiceNames - Names of the services offered by the NF
 * @param RequesterNfInstanceFqdn - FQDN of the requester NF
 * @param TargetPlmnList - Id of the PLMN of either the target NF, or in SNPN scenario the Credentials Holder in the PLMN
 * @param RequesterPlmnList - Id of the PLMN where the NF issuing the Discovery request is located
 * @param TargetNfInstanceId - Identity of the NF instance being discovered
 * @param TargetNfInstanceName - Name of the NF instance being discovered
 * @param TargetNfFqdn - FQDN of the NF instance being discovered
 * @param HnrfUri - Uri of the home NRF
 * @param Snssais - Slice info of the target NF
 * @param RequesterSnssais - Slice info of the requester NF
 * @param PlmnSpecificSnssaiList - PLMN specific Slice info of the target NF
 * @param RequesterPlmnSpecificSnssaiList - PLMN-specific slice info of the NF issuing the Discovery request
 * @param Dnn - Dnn supported by the BSF, SMF or UPF
 * @param Ipv4Index - The IPv4 Index supported by the candidate UPF.
 * @param Ipv6Index - The IPv6 Index supported by the candidate UPF.
 * @param NsiList - NSI IDs that are served by the services being discovered
 * @param SmfServingArea -
 * @param MbsmfServingArea -
 * @param Tai - Tracking Area Identity
 * @param AmfRegionId - AMF Region Identity
 * @param AmfSetId - AMF Set Identity
 * @param Guami - Guami used to search for an appropriate AMF
 * @param Supi - SUPI of the user
 * @param UeIpv4Address - IPv4 address of the UE
 * @param IpDomain - IP domain of the UE, which supported by BSF
 * @param UeIpv6Prefix - IPv6 prefix of the UE
 * @param PgwInd - Combined PGW-C and SMF or a standalone SMF
 * @param PreferredPgwInd - Indicates combined PGW-C+SMF or standalone SMF are preferred
 * @param Pgw - PGW FQDN of a combined PGW-C and SMF
 * @param PgwIp - PGW IP Address of a combined PGW-C and SMF
 * @param Gpsi - GPSI of the user
 * @param ExternalGroupIdentity - external group identifier of the user
 * @param InternalGroupIdentity - internal group identifier of the user
 * @param PfdData - PFD data
 * @param DataSet - data set supported by the NF
 * @param RoutingIndicator - routing indicator in SUCI
 * @param GroupIdList - Group IDs of the NFs being discovered
 * @param DnaiList - Data network access identifiers of the NFs being discovered
 * @param PduSessionTypes - list of PDU Session Type required to be supported by the target NF
 * @param EventIdList - Analytics event(s) requested to be supported by the Nnwdaf_AnalyticsInfo service
 * @param NwdafEventList - Analytics event(s) requested to be supported by the Nnwdaf_EventsSubscription service.
 * @param SupportedFeatures - Features required to be supported by the target NF
 * @param UpfIwkEpsInd - UPF supporting interworking with EPS or not
 * @param ChfSupportedPlmn - PLMN ID supported by a CHF
 * @param PreferredLocality - preferred target NF location
 * @param AccessType - AccessType supported by the target NF
 * @param Limit - Maximum number of NFProfiles to return in the response
 * @param RequiredFeatures - Features required to be supported by the target NF
 * @param ComplexQuery - the complex query condition expression
 * @param MaxPayloadSize - Maximum payload size of the response expressed in kilo octets
 * @param MaxPayloadSizeExt - Extended query for maximum payload size of the response expressed in kilo octets
 * @param AtsssCapability - ATSSS Capability
 * @param UpfUeIpAddrInd - UPF supporting allocating UE IP addresses/prefixes
 * @param ClientType - Requested client type served by the NF
 * @param LmfId - LMF identification to be discovered
 * @param AnNodeType - Requested AN node type served by the NF
 * @param RatType - Requested RAT type served by the NF
 * @param PreferredTai - preferred Tracking Area Identity
 * @param PreferredNfInstances - preferred NF Instances
 * @param IfNoneMatch - Validator for conditional requests, as described in IETF RFC 7232, 3.2
 * @param TargetSnpn - Target SNPN Identity, or the Credentials Holder in the SNPN
 * @param RequesterSnpnList - SNPN ID(s) of the NF instance issuing the Discovery request
 * @param AfEeData - NEF exposured by the AF
 * @param WAgfInfo - UPF collocated with W-AGF
 * @param TngfInfo - UPF collocated with TNGF
 * @param TwifInfo - UPF collocated with TWIF
 * @param TargetNfSetId - Target NF Set ID
 * @param TargetNfServiceSetId - Target NF Service Set ID
 * @param NefId - NEF ID
 * @param NotificationType - Notification Type
 * @param N1MsgClass - N1 Message Class
 * @param N2InfoClass - N2 Information Class
 * @param ServingScope - areas that can be served by the target NF
 * @param Imsi - IMSI of the requester UE to search for an appropriate NF (e.g. HSS)
 * @param ImsPrivateIdentity - IMPI of the requester UE to search for a target HSS
 * @param ImsPublicIdentity - IMS Public Identity of the requester UE to search for a target HSS
 * @param Msisdn - MSISDN of the requester UE to search for a target HSS
 * @param PreferredApiVersions - Preferred API version of the services to be discovered
 * @param V2xSupportInd - PCF supports V2X
 * @param RedundantGtpu - UPF supports redundant gtp-u to be discovered
 * @param RedundantTransport - UPF supports redundant transport path to be discovered
 * @param Ipups - UPF which is configured for IPUPS functionality to be discovered
 * @param ScpDomainList - SCP domains the target SCP or SEPP belongs to
 * @param AddressDomain - Address domain reachable through the SCP
 * @param Ipv4Addr - IPv4 address reachable through the SCP
 * @param Ipv6Prefix - IPv6 prefix reachable through the SCP
 * @param ServedNfSetId - NF Set ID served by the SCP
 * @param RemotePlmnId - Id of the PLMN reachable through the SCP or SEPP
 * @param RemoteSnpnId - Id of the SNPN reachable through the SCP or SEPP
 * @param DataForwarding - UPF Instance(s) configured for data forwarding are requested
 * @param PreferredFullPlmn - NF Instance(s) serving the full PLMN are preferred
 * @param RequesterFeatures - Features supported by the NF Service Consumer that is invoking the Nnrf_NFDiscovery service
 * @param RealmId - realm-id to search for an appropriate UDSF
 * @param StorageId - storage-id to search for an appropriate UDSF
 * @param VsmfSupportInd - V-SMF capability supported by the target NF instance(s)
 * @param IsmfSupportInd - I-SMF capability supported by the target NF instance(s)
 * @param NrfDiscUri - Uri of the NRF holding the NF profile of a target NF Instance
 * @param PreferredVendorSpecificFeatures - Preferred vendor specific features of the services to be discovered
 * @param PreferredVendorSpecificNfFeatures - Preferred vendor specific features of the network function to be discovered
 * @param RequiredPfcpFeatures - PFCP features required to be supported by the target UPF
 * @param HomePubKeyId - Indicates the Home Network Public Key ID which shall be able to be served by the NF instance
 * @param ProseSupportInd - PCF supports ProSe Capability
 * @param AnalyticsAggregationInd - analytics aggregation is supported by NWDAF or not
 * @param ServingNfSetId - NF Set Id served by target NF
 * @param ServingNfType - NF type served by the target NF
 * @param MlAnalyticsInfoList - Lisf of ML Analytics Filter information of Nnwdaf_MLModelProvision service
 * @param AnalyticsMetadataProvInd - analytics matadata provisioning is supported by NWDAF or not
 * @param NsacfCapability - the service capability supported by the target NSACF
 * @param MbsSessionIdList - List of MBS Session ID(s)
 * @param AreaSessionId - Area Session ID
 * @param GmlcNumber - The GMLC Number supported by the GMLC
 * @param UpfN6Ip - N6 IP address of PSA UPF supported by the EASDF
 * @param TaiList - Tracking Area Identifiers of the NFs being discovered
 * @param PreferencesPrecedence - Indicates the precedence of the preference query parameters (from higher to lower)
 * @param SupportOnboardingCapability - Indicating the support for onboarding.
 * @param UasNfFunctionalityInd - UAS NF functionality is supported by NEF or not
 * @param V2xCapability - indicates the V2X capability that the target PCF needs to support.
 * @param ProseCapability - indicates the ProSe capability that the target PCF needs to support.
 * @param SharedDataId - Identifier of shared data stored in the NF being discovered
 * @param TargetHni - Home Network Identifier query.
 * @param TargetNwResolution - Resolution of the identity of the target PLMN based on the GPSI of the UE
 * @param ExcludeNfinstList - NF Instance IDs to be excluded from the NF Discovery procedure
 * @param ExcludeNfservinstList - NF service instance IDs to be excluded from the NF Discovery procedure
 * @param ExcludeNfservicesetList - NF Service Set IDs to be excluded from the NF Discovery procedure
 * @param ExcludeNfsetList - NF Set IDs to be excluded from the NF Discovery procedure
 * @param PreferredAnalyticsDelays - Preferred analytics delays supported by the NWDAF to be discovered
 * @param HighLatencyCom - Indicating the support for High Latency communication.
 * @param NsacSai - NSAC Service Area Identifier

@return SearchNFInstancesResponse
*/

// SearchNFInstancesRequest
type SearchNFInstancesRequest struct {
	TargetNfType                      *models.NrfNfManagementNfType
	RequesterNfType                   *models.NrfNfManagementNfType
	AcceptEncoding                    *string
	PreferredCollocatedNfTypes        []models.CollocatedNfType
	RequesterNfInstanceId             *string
	ServiceNames                      []models.ServiceName
	RequesterNfInstanceFqdn           *string
	TargetPlmnList                    []models.PlmnId
	RequesterPlmnList                 []models.PlmnId
	TargetNfInstanceId                *string
	TargetNfInstanceName              *string
	TargetNfFqdn                      *string
	HnrfUri                           *string
	Snssais                           []models.Snssai
	RequesterSnssais                  []models.ExtSnssai
	PlmnSpecificSnssaiList            []models.PlmnSnssai
	RequesterPlmnSpecificSnssaiList   []models.PlmnSnssai
	Dnn                               *string
	Ipv4Index                         *models.UdmSdmIpIndex
	Ipv6Index                         *models.UdmSdmIpIndex
	NsiList                           []string
	SmfServingArea                    *string
	MbsmfServingArea                  *string
	Tai                               *models.Tai
	AmfRegionId                       *string
	AmfSetId                          *string
	Guami                             *models.Guami
	Supi                              *string
	UeIpv4Address                     *string
	IpDomain                          *string
	UeIpv6Prefix                      *string
	PgwInd                            *bool
	PreferredPgwInd                   *bool
	Pgw                               *string
	PgwIp                             *models.IpAddr
	Gpsi                              *string
	ExternalGroupIdentity             *string
	InternalGroupIdentity             *string
	PfdData                           *models.NrfNfManagementPfdData
	DataSet                           *models.DataSetId
	RoutingIndicator                  *string
	GroupIdList                       []string
	DnaiList                          []string
	PduSessionTypes                   []models.PduSessionType
	EventIdList                       []models.EventId
	NwdafEventList                    []models.NwdafEvent
	SupportedFeatures                 *string
	UpfIwkEpsInd                      *bool
	ChfSupportedPlmn                  *models.PlmnId
	PreferredLocality                 *string
	AccessType                        *models.AccessType
	Limit                             *int32
	RequiredFeatures                  []string
	ComplexQuery                      *models.ComplexQuery
	MaxPayloadSize                    *int32
	MaxPayloadSizeExt                 *int32
	AtsssCapability                   *models.AtsssCapability
	UpfUeIpAddrInd                    *bool
	ClientType                        *models.ExternalClientType
	LmfId                             *string
	AnNodeType                        *models.AnNodeType
	RatType                           *models.RatType
	PreferredTai                      *models.Tai
	PreferredNfInstances              []string
	IfNoneMatch                       *string
	TargetSnpn                        *models.PlmnIdNid
	RequesterSnpnList                 []models.PlmnIdNid
	AfEeData                          *models.AfEventExposureData
	WAgfInfo                          *models.WAgfInfo
	TngfInfo                          *models.TngfInfo
	TwifInfo                          *models.TwifInfo
	TargetNfSetId                     *string
	TargetNfServiceSetId              *string
	NefId                             *string
	NotificationType                  *models.NrfNfManagementNotificationType
	N1MsgClass                        *models.N1MessageClass
	N2InfoClass                       *models.N2InformationClass
	ServingScope                      []string
	Imsi                              *string
	ImsPrivateIdentity                *string
	ImsPublicIdentity                 *string
	Msisdn                            *string
	PreferredApiVersions              map[string]string
	V2xSupportInd                     *bool
	RedundantGtpu                     *bool
	RedundantTransport                *bool
	Ipups                             *bool
	ScpDomainList                     []string
	AddressDomain                     *string
	Ipv4Addr                          *string
	Ipv6Prefix                        *string
	ServedNfSetId                     *string
	RemotePlmnId                      *models.PlmnId
	RemoteSnpnId                      *models.PlmnIdNid
	DataForwarding                    *bool
	PreferredFullPlmn                 *bool
	RequesterFeatures                 *string
	RealmId                           *string
	StorageId                         *string
	VsmfSupportInd                    *bool
	IsmfSupportInd                    *bool
	NrfDiscUri                        *string
	PreferredVendorSpecificFeatures   map[string]map[string][]models.VendorSpecificFeature
	PreferredVendorSpecificNfFeatures map[string][]models.VendorSpecificFeature
	RequiredPfcpFeatures              *string
	HomePubKeyId                      *int32
	ProseSupportInd                   *bool
	AnalyticsAggregationInd           *bool
	ServingNfSetId                    *string
	ServingNfType                     *models.NrfNfManagementNfType
	MlAnalyticsInfoList               []models.MlAnalyticsInfo
	AnalyticsMetadataProvInd          *bool
	NsacfCapability                   *models.NsacfCapability
	MbsSessionIdList                  []models.MbsSessionId
	AreaSessionId                     *int32
	GmlcNumber                        *string
	UpfN6Ip                           *models.IpAddr
	TaiList                           []models.Tai
	PreferencesPrecedence             []string
	SupportOnboardingCapability       *bool
	UasNfFunctionalityInd             *bool
	V2xCapability                     *models.V2xCapability
	ProseCapability                   *models.NrfNfManagementProSeCapability
	SharedDataId                      *string
	TargetHni                         *string
	TargetNwResolution                *bool
	ExcludeNfinstList                 []string
	ExcludeNfservinstList             []models.NfServiceInstance
	ExcludeNfservicesetList           []string
	ExcludeNfsetList                  []string
	PreferredAnalyticsDelays          map[string]int32
	HighLatencyCom                    *bool
	NsacSai                           *string
}

func (r *SearchNFInstancesRequest) SetTargetNfType(TargetNfType models.NrfNfManagementNfType) {
	r.TargetNfType = &TargetNfType
}
func (r *SearchNFInstancesRequest) SetRequesterNfType(RequesterNfType models.NrfNfManagementNfType) {
	r.RequesterNfType = &RequesterNfType
}
func (r *SearchNFInstancesRequest) SetAcceptEncoding(AcceptEncoding string) {
	r.AcceptEncoding = &AcceptEncoding
}
func (r *SearchNFInstancesRequest) SetPreferredCollocatedNfTypes(PreferredCollocatedNfTypes []models.CollocatedNfType) {
	r.PreferredCollocatedNfTypes = PreferredCollocatedNfTypes
}
func (r *SearchNFInstancesRequest) SetRequesterNfInstanceId(RequesterNfInstanceId string) {
	r.RequesterNfInstanceId = &RequesterNfInstanceId
}
func (r *SearchNFInstancesRequest) SetServiceNames(ServiceNames []models.ServiceName) {
	r.ServiceNames = ServiceNames
}
func (r *SearchNFInstancesRequest) SetRequesterNfInstanceFqdn(RequesterNfInstanceFqdn string) {
	r.RequesterNfInstanceFqdn = &RequesterNfInstanceFqdn
}
func (r *SearchNFInstancesRequest) SetTargetPlmnList(TargetPlmnList []models.PlmnId) {
	r.TargetPlmnList = TargetPlmnList
}
func (r *SearchNFInstancesRequest) SetRequesterPlmnList(RequesterPlmnList []models.PlmnId) {
	r.RequesterPlmnList = RequesterPlmnList
}
func (r *SearchNFInstancesRequest) SetTargetNfInstanceId(TargetNfInstanceId string) {
	r.TargetNfInstanceId = &TargetNfInstanceId
}
func (r *SearchNFInstancesRequest) SetTargetNfInstanceName(TargetNfInstanceName string) {
	r.TargetNfInstanceName = &TargetNfInstanceName
}
func (r *SearchNFInstancesRequest) SetTargetNfFqdn(TargetNfFqdn string) {
	r.TargetNfFqdn = &TargetNfFqdn
}
func (r *SearchNFInstancesRequest) SetHnrfUri(HnrfUri string) {
	r.HnrfUri = &HnrfUri
}
func (r *SearchNFInstancesRequest) SetSnssais(Snssais []models.Snssai) {
	r.Snssais = Snssais
}
func (r *SearchNFInstancesRequest) SetRequesterSnssais(RequesterSnssais []models.ExtSnssai) {
	r.RequesterSnssais = RequesterSnssais
}
func (r *SearchNFInstancesRequest) SetPlmnSpecificSnssaiList(PlmnSpecificSnssaiList []models.PlmnSnssai) {
	r.PlmnSpecificSnssaiList = PlmnSpecificSnssaiList
}
func (r *SearchNFInstancesRequest) SetRequesterPlmnSpecificSnssaiList(RequesterPlmnSpecificSnssaiList []models.PlmnSnssai) {
	r.RequesterPlmnSpecificSnssaiList = RequesterPlmnSpecificSnssaiList
}
func (r *SearchNFInstancesRequest) SetDnn(Dnn string) {
	r.Dnn = &Dnn
}
func (r *SearchNFInstancesRequest) SetIpv4Index(Ipv4Index models.UdmSdmIpIndex) {
	r.Ipv4Index = &Ipv4Index
}
func (r *SearchNFInstancesRequest) SetIpv6Index(Ipv6Index models.UdmSdmIpIndex) {
	r.Ipv6Index = &Ipv6Index
}
func (r *SearchNFInstancesRequest) SetNsiList(NsiList []string) {
	r.NsiList = NsiList
}
func (r *SearchNFInstancesRequest) SetSmfServingArea(SmfServingArea string) {
	r.SmfServingArea = &SmfServingArea
}
func (r *SearchNFInstancesRequest) SetMbsmfServingArea(MbsmfServingArea string) {
	r.MbsmfServingArea = &MbsmfServingArea
}
func (r *SearchNFInstancesRequest) SetTai(Tai models.Tai) {
	r.Tai = &Tai
}
func (r *SearchNFInstancesRequest) SetAmfRegionId(AmfRegionId string) {
	r.AmfRegionId = &AmfRegionId
}
func (r *SearchNFInstancesRequest) SetAmfSetId(AmfSetId string) {
	r.AmfSetId = &AmfSetId
}
func (r *SearchNFInstancesRequest) SetGuami(Guami models.Guami) {
	r.Guami = &Guami
}
func (r *SearchNFInstancesRequest) SetSupi(Supi string) {
	r.Supi = &Supi
}
func (r *SearchNFInstancesRequest) SetUeIpv4Address(UeIpv4Address string) {
	r.UeIpv4Address = &UeIpv4Address
}
func (r *SearchNFInstancesRequest) SetIpDomain(IpDomain string) {
	r.IpDomain = &IpDomain
}
func (r *SearchNFInstancesRequest) SetUeIpv6Prefix(UeIpv6Prefix string) {
	r.UeIpv6Prefix = &UeIpv6Prefix
}
func (r *SearchNFInstancesRequest) SetPgwInd(PgwInd bool) {
	r.PgwInd = &PgwInd
}
func (r *SearchNFInstancesRequest) SetPreferredPgwInd(PreferredPgwInd bool) {
	r.PreferredPgwInd = &PreferredPgwInd
}
func (r *SearchNFInstancesRequest) SetPgw(Pgw string) {
	r.Pgw = &Pgw
}
func (r *SearchNFInstancesRequest) SetPgwIp(PgwIp models.IpAddr) {
	r.PgwIp = &PgwIp
}
func (r *SearchNFInstancesRequest) SetGpsi(Gpsi string) {
	r.Gpsi = &Gpsi
}
func (r *SearchNFInstancesRequest) SetExternalGroupIdentity(ExternalGroupIdentity string) {
	r.ExternalGroupIdentity = &ExternalGroupIdentity
}
func (r *SearchNFInstancesRequest) SetInternalGroupIdentity(InternalGroupIdentity string) {
	r.InternalGroupIdentity = &InternalGroupIdentity
}
func (r *SearchNFInstancesRequest) SetPfdData(PfdData models.NrfNfManagementPfdData) {
	r.PfdData = &PfdData
}
func (r *SearchNFInstancesRequest) SetDataSet(DataSet models.DataSetId) {
	r.DataSet = &DataSet
}
func (r *SearchNFInstancesRequest) SetRoutingIndicator(RoutingIndicator string) {
	r.RoutingIndicator = &RoutingIndicator
}
func (r *SearchNFInstancesRequest) SetGroupIdList(GroupIdList []string) {
	r.GroupIdList = GroupIdList
}
func (r *SearchNFInstancesRequest) SetDnaiList(DnaiList []string) {
	r.DnaiList = DnaiList
}
func (r *SearchNFInstancesRequest) SetPduSessionTypes(PduSessionTypes []models.PduSessionType) {
	r.PduSessionTypes = PduSessionTypes
}
func (r *SearchNFInstancesRequest) SetEventIdList(EventIdList []models.EventId) {
	r.EventIdList = EventIdList
}
func (r *SearchNFInstancesRequest) SetNwdafEventList(NwdafEventList []models.NwdafEvent) {
	r.NwdafEventList = NwdafEventList
}
func (r *SearchNFInstancesRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}
func (r *SearchNFInstancesRequest) SetUpfIwkEpsInd(UpfIwkEpsInd bool) {
	r.UpfIwkEpsInd = &UpfIwkEpsInd
}
func (r *SearchNFInstancesRequest) SetChfSupportedPlmn(ChfSupportedPlmn models.PlmnId) {
	r.ChfSupportedPlmn = &ChfSupportedPlmn
}
func (r *SearchNFInstancesRequest) SetPreferredLocality(PreferredLocality string) {
	r.PreferredLocality = &PreferredLocality
}
func (r *SearchNFInstancesRequest) SetAccessType(AccessType models.AccessType) {
	r.AccessType = &AccessType
}
func (r *SearchNFInstancesRequest) SetLimit(Limit int32) {
	r.Limit = &Limit
}
func (r *SearchNFInstancesRequest) SetRequiredFeatures(RequiredFeatures []string) {
	r.RequiredFeatures = RequiredFeatures
}
func (r *SearchNFInstancesRequest) SetComplexQuery(ComplexQuery models.ComplexQuery) {
	r.ComplexQuery = &ComplexQuery
}
func (r *SearchNFInstancesRequest) SetMaxPayloadSize(MaxPayloadSize int32) {
	r.MaxPayloadSize = &MaxPayloadSize
}
func (r *SearchNFInstancesRequest) SetMaxPayloadSizeExt(MaxPayloadSizeExt int32) {
	r.MaxPayloadSizeExt = &MaxPayloadSizeExt
}
func (r *SearchNFInstancesRequest) SetAtsssCapability(AtsssCapability models.AtsssCapability) {
	r.AtsssCapability = &AtsssCapability
}
func (r *SearchNFInstancesRequest) SetUpfUeIpAddrInd(UpfUeIpAddrInd bool) {
	r.UpfUeIpAddrInd = &UpfUeIpAddrInd
}
func (r *SearchNFInstancesRequest) SetClientType(ClientType models.ExternalClientType) {
	r.ClientType = &ClientType
}
func (r *SearchNFInstancesRequest) SetLmfId(LmfId string) {
	r.LmfId = &LmfId
}
func (r *SearchNFInstancesRequest) SetAnNodeType(AnNodeType models.AnNodeType) {
	r.AnNodeType = &AnNodeType
}
func (r *SearchNFInstancesRequest) SetRatType(RatType models.RatType) {
	r.RatType = &RatType
}
func (r *SearchNFInstancesRequest) SetPreferredTai(PreferredTai models.Tai) {
	r.PreferredTai = &PreferredTai
}
func (r *SearchNFInstancesRequest) SetPreferredNfInstances(PreferredNfInstances []string) {
	r.PreferredNfInstances = PreferredNfInstances
}
func (r *SearchNFInstancesRequest) SetIfNoneMatch(IfNoneMatch string) {
	r.IfNoneMatch = &IfNoneMatch
}
func (r *SearchNFInstancesRequest) SetTargetSnpn(TargetSnpn models.PlmnIdNid) {
	r.TargetSnpn = &TargetSnpn
}
func (r *SearchNFInstancesRequest) SetRequesterSnpnList(RequesterSnpnList []models.PlmnIdNid) {
	r.RequesterSnpnList = RequesterSnpnList
}
func (r *SearchNFInstancesRequest) SetAfEeData(AfEeData models.AfEventExposureData) {
	r.AfEeData = &AfEeData
}
func (r *SearchNFInstancesRequest) SetWAgfInfo(WAgfInfo models.WAgfInfo) {
	r.WAgfInfo = &WAgfInfo
}
func (r *SearchNFInstancesRequest) SetTngfInfo(TngfInfo models.TngfInfo) {
	r.TngfInfo = &TngfInfo
}
func (r *SearchNFInstancesRequest) SetTwifInfo(TwifInfo models.TwifInfo) {
	r.TwifInfo = &TwifInfo
}
func (r *SearchNFInstancesRequest) SetTargetNfSetId(TargetNfSetId string) {
	r.TargetNfSetId = &TargetNfSetId
}
func (r *SearchNFInstancesRequest) SetTargetNfServiceSetId(TargetNfServiceSetId string) {
	r.TargetNfServiceSetId = &TargetNfServiceSetId
}
func (r *SearchNFInstancesRequest) SetNefId(NefId string) {
	r.NefId = &NefId
}
func (r *SearchNFInstancesRequest) SetNotificationType(NotificationType models.NrfNfManagementNotificationType) {
	r.NotificationType = &NotificationType
}
func (r *SearchNFInstancesRequest) SetN1MsgClass(N1MsgClass models.N1MessageClass) {
	r.N1MsgClass = &N1MsgClass
}
func (r *SearchNFInstancesRequest) SetN2InfoClass(N2InfoClass models.N2InformationClass) {
	r.N2InfoClass = &N2InfoClass
}
func (r *SearchNFInstancesRequest) SetServingScope(ServingScope []string) {
	r.ServingScope = ServingScope
}
func (r *SearchNFInstancesRequest) SetImsi(Imsi string) {
	r.Imsi = &Imsi
}
func (r *SearchNFInstancesRequest) SetImsPrivateIdentity(ImsPrivateIdentity string) {
	r.ImsPrivateIdentity = &ImsPrivateIdentity
}
func (r *SearchNFInstancesRequest) SetImsPublicIdentity(ImsPublicIdentity string) {
	r.ImsPublicIdentity = &ImsPublicIdentity
}
func (r *SearchNFInstancesRequest) SetMsisdn(Msisdn string) {
	r.Msisdn = &Msisdn
}
func (r *SearchNFInstancesRequest) SetPreferredApiVersions(PreferredApiVersions map[string]string) {
	r.PreferredApiVersions = PreferredApiVersions
}
func (r *SearchNFInstancesRequest) SetV2xSupportInd(V2xSupportInd bool) {
	r.V2xSupportInd = &V2xSupportInd
}
func (r *SearchNFInstancesRequest) SetRedundantGtpu(RedundantGtpu bool) {
	r.RedundantGtpu = &RedundantGtpu
}
func (r *SearchNFInstancesRequest) SetRedundantTransport(RedundantTransport bool) {
	r.RedundantTransport = &RedundantTransport
}
func (r *SearchNFInstancesRequest) SetIpups(Ipups bool) {
	r.Ipups = &Ipups
}
func (r *SearchNFInstancesRequest) SetScpDomainList(ScpDomainList []string) {
	r.ScpDomainList = ScpDomainList
}
func (r *SearchNFInstancesRequest) SetAddressDomain(AddressDomain string) {
	r.AddressDomain = &AddressDomain
}
func (r *SearchNFInstancesRequest) SetIpv4Addr(Ipv4Addr string) {
	r.Ipv4Addr = &Ipv4Addr
}
func (r *SearchNFInstancesRequest) SetIpv6Prefix(Ipv6Prefix string) {
	r.Ipv6Prefix = &Ipv6Prefix
}
func (r *SearchNFInstancesRequest) SetServedNfSetId(ServedNfSetId string) {
	r.ServedNfSetId = &ServedNfSetId
}
func (r *SearchNFInstancesRequest) SetRemotePlmnId(RemotePlmnId models.PlmnId) {
	r.RemotePlmnId = &RemotePlmnId
}
func (r *SearchNFInstancesRequest) SetRemoteSnpnId(RemoteSnpnId models.PlmnIdNid) {
	r.RemoteSnpnId = &RemoteSnpnId
}
func (r *SearchNFInstancesRequest) SetDataForwarding(DataForwarding bool) {
	r.DataForwarding = &DataForwarding
}
func (r *SearchNFInstancesRequest) SetPreferredFullPlmn(PreferredFullPlmn bool) {
	r.PreferredFullPlmn = &PreferredFullPlmn
}
func (r *SearchNFInstancesRequest) SetRequesterFeatures(RequesterFeatures string) {
	r.RequesterFeatures = &RequesterFeatures
}
func (r *SearchNFInstancesRequest) SetRealmId(RealmId string) {
	r.RealmId = &RealmId
}
func (r *SearchNFInstancesRequest) SetStorageId(StorageId string) {
	r.StorageId = &StorageId
}
func (r *SearchNFInstancesRequest) SetVsmfSupportInd(VsmfSupportInd bool) {
	r.VsmfSupportInd = &VsmfSupportInd
}
func (r *SearchNFInstancesRequest) SetIsmfSupportInd(IsmfSupportInd bool) {
	r.IsmfSupportInd = &IsmfSupportInd
}
func (r *SearchNFInstancesRequest) SetNrfDiscUri(NrfDiscUri string) {
	r.NrfDiscUri = &NrfDiscUri
}
func (r *SearchNFInstancesRequest) SetPreferredVendorSpecificFeatures(PreferredVendorSpecificFeatures map[string]map[string][]models.VendorSpecificFeature) {
	r.PreferredVendorSpecificFeatures = PreferredVendorSpecificFeatures
}
func (r *SearchNFInstancesRequest) SetPreferredVendorSpecificNfFeatures(PreferredVendorSpecificNfFeatures map[string][]models.VendorSpecificFeature) {
	r.PreferredVendorSpecificNfFeatures = PreferredVendorSpecificNfFeatures
}
func (r *SearchNFInstancesRequest) SetRequiredPfcpFeatures(RequiredPfcpFeatures string) {
	r.RequiredPfcpFeatures = &RequiredPfcpFeatures
}
func (r *SearchNFInstancesRequest) SetHomePubKeyId(HomePubKeyId int32) {
	r.HomePubKeyId = &HomePubKeyId
}
func (r *SearchNFInstancesRequest) SetProseSupportInd(ProseSupportInd bool) {
	r.ProseSupportInd = &ProseSupportInd
}
func (r *SearchNFInstancesRequest) SetAnalyticsAggregationInd(AnalyticsAggregationInd bool) {
	r.AnalyticsAggregationInd = &AnalyticsAggregationInd
}
func (r *SearchNFInstancesRequest) SetServingNfSetId(ServingNfSetId string) {
	r.ServingNfSetId = &ServingNfSetId
}
func (r *SearchNFInstancesRequest) SetServingNfType(ServingNfType models.NrfNfManagementNfType) {
	r.ServingNfType = &ServingNfType
}
func (r *SearchNFInstancesRequest) SetMlAnalyticsInfoList(MlAnalyticsInfoList []models.MlAnalyticsInfo) {
	r.MlAnalyticsInfoList = MlAnalyticsInfoList
}
func (r *SearchNFInstancesRequest) SetAnalyticsMetadataProvInd(AnalyticsMetadataProvInd bool) {
	r.AnalyticsMetadataProvInd = &AnalyticsMetadataProvInd
}
func (r *SearchNFInstancesRequest) SetNsacfCapability(NsacfCapability models.NsacfCapability) {
	r.NsacfCapability = &NsacfCapability
}
func (r *SearchNFInstancesRequest) SetMbsSessionIdList(MbsSessionIdList []models.MbsSessionId) {
	r.MbsSessionIdList = MbsSessionIdList
}
func (r *SearchNFInstancesRequest) SetAreaSessionId(AreaSessionId int32) {
	r.AreaSessionId = &AreaSessionId
}
func (r *SearchNFInstancesRequest) SetGmlcNumber(GmlcNumber string) {
	r.GmlcNumber = &GmlcNumber
}
func (r *SearchNFInstancesRequest) SetUpfN6Ip(UpfN6Ip models.IpAddr) {
	r.UpfN6Ip = &UpfN6Ip
}
func (r *SearchNFInstancesRequest) SetTaiList(TaiList []models.Tai) {
	r.TaiList = TaiList
}
func (r *SearchNFInstancesRequest) SetPreferencesPrecedence(PreferencesPrecedence []string) {
	r.PreferencesPrecedence = PreferencesPrecedence
}
func (r *SearchNFInstancesRequest) SetSupportOnboardingCapability(SupportOnboardingCapability bool) {
	r.SupportOnboardingCapability = &SupportOnboardingCapability
}
func (r *SearchNFInstancesRequest) SetUasNfFunctionalityInd(UasNfFunctionalityInd bool) {
	r.UasNfFunctionalityInd = &UasNfFunctionalityInd
}
func (r *SearchNFInstancesRequest) SetV2xCapability(V2xCapability models.V2xCapability) {
	r.V2xCapability = &V2xCapability
}
func (r *SearchNFInstancesRequest) SetProseCapability(ProseCapability models.NrfNfManagementProSeCapability) {
	r.ProseCapability = &ProseCapability
}
func (r *SearchNFInstancesRequest) SetSharedDataId(SharedDataId string) {
	r.SharedDataId = &SharedDataId
}
func (r *SearchNFInstancesRequest) SetTargetHni(TargetHni string) {
	r.TargetHni = &TargetHni
}
func (r *SearchNFInstancesRequest) SetTargetNwResolution(TargetNwResolution bool) {
	r.TargetNwResolution = &TargetNwResolution
}
func (r *SearchNFInstancesRequest) SetExcludeNfinstList(ExcludeNfinstList []string) {
	r.ExcludeNfinstList = ExcludeNfinstList
}
func (r *SearchNFInstancesRequest) SetExcludeNfservinstList(ExcludeNfservinstList []models.NfServiceInstance) {
	r.ExcludeNfservinstList = ExcludeNfservinstList
}
func (r *SearchNFInstancesRequest) SetExcludeNfservicesetList(ExcludeNfservicesetList []string) {
	r.ExcludeNfservicesetList = ExcludeNfservicesetList
}
func (r *SearchNFInstancesRequest) SetExcludeNfsetList(ExcludeNfsetList []string) {
	r.ExcludeNfsetList = ExcludeNfsetList
}
func (r *SearchNFInstancesRequest) SetPreferredAnalyticsDelays(PreferredAnalyticsDelays map[string]int32) {
	r.PreferredAnalyticsDelays = PreferredAnalyticsDelays
}
func (r *SearchNFInstancesRequest) SetHighLatencyCom(HighLatencyCom bool) {
	r.HighLatencyCom = &HighLatencyCom
}
func (r *SearchNFInstancesRequest) SetNsacSai(NsacSai string) {
	r.NsacSai = &NsacSai
}

type SearchNFInstancesResponse struct {
	CacheControl    string
	ContentEncoding string
	ETag            string
	SearchResult    models.SearchResult
}

type SearchNFInstancesError struct {
	Location         string
	ProblemDetails   models.ProblemDetails
	RedirectResponse models.RedirectResponse
}

func (a *NFInstancesStoreApiService) SearchNFInstances(ctx context.Context, request *SearchNFInstancesRequest) (*SearchNFInstancesResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchNFInstancesResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/nf-instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.TargetNfType == nil {
		return nil, openapi.ReportError("TargetNfType must be non nil")
	} else {
		localVarQueryParams.Add("target-nf-type", openapi.ParameterToString(request.TargetNfType, "multi"))
	}
	if request.RequesterNfType == nil {
		return nil, openapi.ReportError("RequesterNfType must be non nil")
	} else {
		localVarQueryParams.Add("requester-nf-type", openapi.ParameterToString(request.RequesterNfType, "multi"))
	}
	if request.PreferredCollocatedNfTypes != nil {
		if len(request.PreferredCollocatedNfTypes) < 1 {
			return &localVarReturnValue, openapi.ReportError("PreferredCollocatedNfTypes must have at least 1 elements")
		}
		localVarQueryParams.Add("preferred-collocated-nf-types", openapi.ParameterToString(request.PreferredCollocatedNfTypes, "csv"))
	}
	if request.RequesterNfInstanceId != nil {
		localVarQueryParams.Add("requester-nf-instance-id", openapi.ParameterToString(request.RequesterNfInstanceId, "multi"))
	}
	if request.ServiceNames != nil {
		if len(request.ServiceNames) < 1 {
			return &localVarReturnValue, openapi.ReportError("ServiceNames must have at least 1 elements")
		}
		localVarQueryParams.Add("service-names", openapi.ParameterToString(request.ServiceNames, "csv"))
	}
	if request.RequesterNfInstanceFqdn != nil {
		if len(*request.RequesterNfInstanceFqdn) < 4 {
			return &localVarReturnValue, openapi.ReportError("RequesterNfInstanceFqdn must have at least 4 elements")
		}
		if len(*request.RequesterNfInstanceFqdn) > 253 {
			return &localVarReturnValue, openapi.ReportError("RequesterNfInstanceFqdn must have less than 253 elements")
		}
		localVarQueryParams.Add("requester-nf-instance-fqdn", openapi.ParameterToString(request.RequesterNfInstanceFqdn, "multi"))
	}
	if request.TargetPlmnList != nil {
		if len(request.TargetPlmnList) < 1 {
			return &localVarReturnValue, openapi.ReportError("TargetPlmnList must have at least 1 elements")
		}
		localVarQueryParams.Add("target-plmn-list", openapi.ParameterToString(request.TargetPlmnList, "application/json"))
	}
	if request.RequesterPlmnList != nil {
		if len(request.RequesterPlmnList) < 1 {
			return &localVarReturnValue, openapi.ReportError("RequesterPlmnList must have at least 1 elements")
		}
		localVarQueryParams.Add("requester-plmn-list", openapi.ParameterToString(request.RequesterPlmnList, "application/json"))
	}
	if request.TargetNfInstanceId != nil {
		localVarQueryParams.Add("target-nf-instance-id", openapi.ParameterToString(request.TargetNfInstanceId, "multi"))
	}
	if request.TargetNfInstanceName != nil {
		localVarQueryParams.Add("target-nf-instance-name", openapi.ParameterToString(request.TargetNfInstanceName, "multi"))
	}
	if request.TargetNfFqdn != nil {
		if len(*request.TargetNfFqdn) < 4 {
			return &localVarReturnValue, openapi.ReportError("TargetNfFqdn must have at least 4 elements")
		}
		if len(*request.TargetNfFqdn) > 253 {
			return &localVarReturnValue, openapi.ReportError("TargetNfFqdn must have less than 253 elements")
		}
		localVarQueryParams.Add("target-nf-fqdn", openapi.ParameterToString(request.TargetNfFqdn, "multi"))
	}
	if request.HnrfUri != nil {
		localVarQueryParams.Add("hnrf-uri", openapi.ParameterToString(request.HnrfUri, "multi"))
	}
	if request.Snssais != nil {
		if len(request.Snssais) < 1 {
			return &localVarReturnValue, openapi.ReportError("Snssais must have at least 1 elements")
		}
		localVarQueryParams.Add("snssais", openapi.ParameterToString(request.Snssais, "application/json"))
	}
	if request.RequesterSnssais != nil {
		if len(request.RequesterSnssais) < 1 {
			return &localVarReturnValue, openapi.ReportError("RequesterSnssais must have at least 1 elements")
		}
		localVarQueryParams.Add("requester-snssais", openapi.ParameterToString(request.RequesterSnssais, "application/json"))
	}
	if request.PlmnSpecificSnssaiList != nil {
		if len(request.PlmnSpecificSnssaiList) < 1 {
			return &localVarReturnValue, openapi.ReportError("PlmnSpecificSnssaiList must have at least 1 elements")
		}
		localVarQueryParams.Add("plmn-specific-snssai-list", openapi.ParameterToString(request.PlmnSpecificSnssaiList, "application/json"))
	}
	if request.RequesterPlmnSpecificSnssaiList != nil {
		if len(request.RequesterPlmnSpecificSnssaiList) < 1 {
			return &localVarReturnValue, openapi.ReportError("RequesterPlmnSpecificSnssaiList must have at least 1 elements")
		}
		localVarQueryParams.Add("requester-plmn-specific-snssai-list", openapi.ParameterToString(request.RequesterPlmnSpecificSnssaiList, "application/json"))
	}
	if request.Dnn != nil {
		localVarQueryParams.Add("dnn", openapi.ParameterToString(request.Dnn, "multi"))
	}
	if request.Ipv4Index != nil {
		localVarQueryParams.Add("ipv4-index", openapi.ParameterToString(request.Ipv4Index, "application/json"))
	}
	if request.Ipv6Index != nil {
		localVarQueryParams.Add("ipv6-index", openapi.ParameterToString(request.Ipv6Index, "application/json"))
	}
	if request.NsiList != nil {
		if len(request.NsiList) < 1 {
			return &localVarReturnValue, openapi.ReportError("NsiList must have at least 1 elements")
		}
		localVarQueryParams.Add("nsi-list", openapi.ParameterToString(request.NsiList, "csv"))
	}
	if request.SmfServingArea != nil {
		localVarQueryParams.Add("smf-serving-area", openapi.ParameterToString(request.SmfServingArea, "multi"))
	}
	if request.MbsmfServingArea != nil {
		localVarQueryParams.Add("mbsmf-serving-area", openapi.ParameterToString(request.MbsmfServingArea, "multi"))
	}
	if request.Tai != nil {
		localVarQueryParams.Add("tai", openapi.ParameterToString(request.Tai, "application/json"))
	}
	if request.AmfRegionId != nil {
		localVarQueryParams.Add("amf-region-id", openapi.ParameterToString(request.AmfRegionId, "multi"))
	}
	if request.AmfSetId != nil {
		localVarQueryParams.Add("amf-set-id", openapi.ParameterToString(request.AmfSetId, "multi"))
	}
	if request.Guami != nil {
		localVarQueryParams.Add("guami", openapi.ParameterToString(request.Guami, "application/json"))
	}
	if request.Supi != nil {
		localVarQueryParams.Add("supi", openapi.ParameterToString(request.Supi, "multi"))
	}
	if request.UeIpv4Address != nil {
		localVarQueryParams.Add("ue-ipv4-address", openapi.ParameterToString(request.UeIpv4Address, "multi"))
	}
	if request.IpDomain != nil {
		localVarQueryParams.Add("ip-domain", openapi.ParameterToString(request.IpDomain, "multi"))
	}
	if request.UeIpv6Prefix != nil {
		localVarQueryParams.Add("ue-ipv6-prefix", openapi.ParameterToString(request.UeIpv6Prefix, "multi"))
	}
	if request.PgwInd != nil {
		localVarQueryParams.Add("pgw-ind", openapi.ParameterToString(request.PgwInd, "multi"))
	}
	if request.PreferredPgwInd != nil {
		localVarQueryParams.Add("preferred-pgw-ind", openapi.ParameterToString(request.PreferredPgwInd, "multi"))
	}
	if request.Pgw != nil {
		if len(*request.Pgw) < 4 {
			return &localVarReturnValue, openapi.ReportError("Pgw must have at least 4 elements")
		}
		if len(*request.Pgw) > 253 {
			return &localVarReturnValue, openapi.ReportError("Pgw must have less than 253 elements")
		}
		localVarQueryParams.Add("pgw", openapi.ParameterToString(request.Pgw, "multi"))
	}
	if request.PgwIp != nil {
		localVarQueryParams.Add("pgw-ip", openapi.ParameterToString(request.PgwIp, "application/json"))
	}
	if request.Gpsi != nil {
		localVarQueryParams.Add("gpsi", openapi.ParameterToString(request.Gpsi, "multi"))
	}
	if request.ExternalGroupIdentity != nil {
		localVarQueryParams.Add("external-group-identity", openapi.ParameterToString(request.ExternalGroupIdentity, "multi"))
	}
	if request.InternalGroupIdentity != nil {
		localVarQueryParams.Add("internal-group-identity", openapi.ParameterToString(request.InternalGroupIdentity, "multi"))
	}
	if request.PfdData != nil {
		localVarQueryParams.Add("pfd-data", openapi.ParameterToString(request.PfdData, "application/json"))
	}
	if request.DataSet != nil {
		localVarQueryParams.Add("data-set", openapi.ParameterToString(request.DataSet, "multi"))
	}
	if request.RoutingIndicator != nil {
		localVarQueryParams.Add("routing-indicator", openapi.ParameterToString(request.RoutingIndicator, "multi"))
	}
	if request.GroupIdList != nil {
		if len(request.GroupIdList) < 1 {
			return &localVarReturnValue, openapi.ReportError("GroupIdList must have at least 1 elements")
		}
		localVarQueryParams.Add("group-id-list", openapi.ParameterToString(request.GroupIdList, "csv"))
	}
	if request.DnaiList != nil {
		if len(request.DnaiList) < 1 {
			return &localVarReturnValue, openapi.ReportError("DnaiList must have at least 1 elements")
		}
		localVarQueryParams.Add("dnai-list", openapi.ParameterToString(request.DnaiList, "csv"))
	}
	if request.PduSessionTypes != nil {
		if len(request.PduSessionTypes) < 1 {
			return &localVarReturnValue, openapi.ReportError("PduSessionTypes must have at least 1 elements")
		}
		localVarQueryParams.Add("pdu-session-types", openapi.ParameterToString(request.PduSessionTypes, "csv"))
	}
	if request.EventIdList != nil {
		if len(request.EventIdList) < 1 {
			return &localVarReturnValue, openapi.ReportError("EventIdList must have at least 1 elements")
		}
		localVarQueryParams.Add("event-id-list", openapi.ParameterToString(request.EventIdList, "csv"))
	}
	if request.NwdafEventList != nil {
		if len(request.NwdafEventList) < 1 {
			return &localVarReturnValue, openapi.ReportError("NwdafEventList must have at least 1 elements")
		}
		localVarQueryParams.Add("nwdaf-event-list", openapi.ParameterToString(request.NwdafEventList, "csv"))
	}
	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	if request.UpfIwkEpsInd != nil {
		localVarQueryParams.Add("upf-iwk-eps-ind", openapi.ParameterToString(request.UpfIwkEpsInd, "multi"))
	}
	if request.ChfSupportedPlmn != nil {
		localVarQueryParams.Add("chf-supported-plmn", openapi.ParameterToString(request.ChfSupportedPlmn, "application/json"))
	}
	if request.PreferredLocality != nil {
		localVarQueryParams.Add("preferred-locality", openapi.ParameterToString(request.PreferredLocality, "multi"))
	}
	if request.AccessType != nil {
		localVarQueryParams.Add("access-type", openapi.ParameterToString(request.AccessType, "multi"))
	}
	if request.Limit != nil {
		localVarQueryParams.Add("limit", openapi.ParameterToString(request.Limit, "multi"))
	}
	if request.RequiredFeatures != nil {
		if len(request.RequiredFeatures) < 1 {
			return &localVarReturnValue, openapi.ReportError("RequiredFeatures must have at least 1 elements")
		}
		localVarQueryParams.Add("required-features", openapi.ParameterToString(request.RequiredFeatures, "csv"))
	}
	if request.ComplexQuery != nil {
		localVarQueryParams.Add("complex-query", openapi.ParameterToString(request.ComplexQuery, "application/json"))
	}
	if request.MaxPayloadSize != nil {
		localVarQueryParams.Add("max-payload-size", openapi.ParameterToString(request.MaxPayloadSize, "multi"))
	}
	if request.MaxPayloadSizeExt != nil {
		localVarQueryParams.Add("max-payload-size-ext", openapi.ParameterToString(request.MaxPayloadSizeExt, "multi"))
	}
	if request.AtsssCapability != nil {
		localVarQueryParams.Add("atsss-capability", openapi.ParameterToString(request.AtsssCapability, "application/json"))
	}
	if request.UpfUeIpAddrInd != nil {
		localVarQueryParams.Add("upf-ue-ip-addr-ind", openapi.ParameterToString(request.UpfUeIpAddrInd, "multi"))
	}
	if request.ClientType != nil {
		localVarQueryParams.Add("client-type", openapi.ParameterToString(request.ClientType, "application/json"))
	}
	if request.LmfId != nil {
		localVarQueryParams.Add("lmf-id", openapi.ParameterToString(request.LmfId, "application/json"))
	}
	if request.AnNodeType != nil {
		localVarQueryParams.Add("an-node-type", openapi.ParameterToString(request.AnNodeType, "application/json"))
	}
	if request.RatType != nil {
		localVarQueryParams.Add("rat-type", openapi.ParameterToString(request.RatType, "application/json"))
	}
	if request.PreferredTai != nil {
		localVarQueryParams.Add("preferred-tai", openapi.ParameterToString(request.PreferredTai, "application/json"))
	}
	if request.PreferredNfInstances != nil {
		if len(request.PreferredNfInstances) < 1 {
			return &localVarReturnValue, openapi.ReportError("PreferredNfInstances must have at least 1 elements")
		}
		localVarQueryParams.Add("preferred-nf-instances", openapi.ParameterToString(request.PreferredNfInstances, "csv"))
	}
	if request.TargetSnpn != nil {
		localVarQueryParams.Add("target-snpn", openapi.ParameterToString(request.TargetSnpn, "application/json"))
	}
	if request.RequesterSnpnList != nil {
		if len(request.RequesterSnpnList) < 1 {
			return &localVarReturnValue, openapi.ReportError("RequesterSnpnList must have at least 1 elements")
		}
		localVarQueryParams.Add("requester-snpn-list", openapi.ParameterToString(request.RequesterSnpnList, "application/json"))
	}
	if request.AfEeData != nil {
		localVarQueryParams.Add("af-ee-data", openapi.ParameterToString(request.AfEeData, "application/json"))
	}
	if request.WAgfInfo != nil {
		localVarQueryParams.Add("w-agf-info", openapi.ParameterToString(request.WAgfInfo, "application/json"))
	}
	if request.TngfInfo != nil {
		localVarQueryParams.Add("tngf-info", openapi.ParameterToString(request.TngfInfo, "application/json"))
	}
	if request.TwifInfo != nil {
		localVarQueryParams.Add("twif-info", openapi.ParameterToString(request.TwifInfo, "application/json"))
	}
	if request.TargetNfSetId != nil {
		localVarQueryParams.Add("target-nf-set-id", openapi.ParameterToString(request.TargetNfSetId, "multi"))
	}
	if request.TargetNfServiceSetId != nil {
		localVarQueryParams.Add("target-nf-service-set-id", openapi.ParameterToString(request.TargetNfServiceSetId, "multi"))
	}
	if request.NefId != nil {
		localVarQueryParams.Add("nef-id", openapi.ParameterToString(request.NefId, "multi"))
	}
	if request.NotificationType != nil {
		localVarQueryParams.Add("notification-type", openapi.ParameterToString(request.NotificationType, "multi"))
	}
	if request.N1MsgClass != nil {
		localVarQueryParams.Add("n1-msg-class", openapi.ParameterToString(request.N1MsgClass, "multi"))
	}
	if request.N2InfoClass != nil {
		localVarQueryParams.Add("n2-info-class", openapi.ParameterToString(request.N2InfoClass, "multi"))
	}
	if request.ServingScope != nil {
		if len(request.ServingScope) < 1 {
			return &localVarReturnValue, openapi.ReportError("ServingScope must have at least 1 elements")
		}
		localVarQueryParams.Add("serving-scope", openapi.ParameterToString(request.ServingScope, "csv"))
	}
	if request.Imsi != nil {
		localVarQueryParams.Add("imsi", openapi.ParameterToString(request.Imsi, "multi"))
	}
	if request.ImsPrivateIdentity != nil {
		localVarQueryParams.Add("ims-private-identity", openapi.ParameterToString(request.ImsPrivateIdentity, "multi"))
	}
	if request.ImsPublicIdentity != nil {
		localVarQueryParams.Add("ims-public-identity", openapi.ParameterToString(request.ImsPublicIdentity, "multi"))
	}
	if request.Msisdn != nil {
		localVarQueryParams.Add("msisdn", openapi.ParameterToString(request.Msisdn, "multi"))
	}
	if request.PreferredApiVersions != nil {
		localVarQueryParams.Add("preferred-api-versions", openapi.ParameterToString(request.PreferredApiVersions, "application/json"))
	}
	if request.V2xSupportInd != nil {
		localVarQueryParams.Add("v2x-support-ind", openapi.ParameterToString(request.V2xSupportInd, "multi"))
	}
	if request.RedundantGtpu != nil {
		localVarQueryParams.Add("redundant-gtpu", openapi.ParameterToString(request.RedundantGtpu, "multi"))
	}
	if request.RedundantTransport != nil {
		localVarQueryParams.Add("redundant-transport", openapi.ParameterToString(request.RedundantTransport, "multi"))
	}
	if request.Ipups != nil {
		localVarQueryParams.Add("ipups", openapi.ParameterToString(request.Ipups, "multi"))
	}
	if request.ScpDomainList != nil {
		if len(request.ScpDomainList) < 1 {
			return &localVarReturnValue, openapi.ReportError("ScpDomainList must have at least 1 elements")
		}
		localVarQueryParams.Add("scp-domain-list", openapi.ParameterToString(request.ScpDomainList, "csv"))
	}
	if request.AddressDomain != nil {
		if len(*request.AddressDomain) < 4 {
			return &localVarReturnValue, openapi.ReportError("AddressDomain must have at least 4 elements")
		}
		if len(*request.AddressDomain) > 253 {
			return &localVarReturnValue, openapi.ReportError("AddressDomain must have less than 253 elements")
		}
		localVarQueryParams.Add("address-domain", openapi.ParameterToString(request.AddressDomain, "multi"))
	}
	if request.Ipv4Addr != nil {
		localVarQueryParams.Add("ipv4-addr", openapi.ParameterToString(request.Ipv4Addr, "multi"))
	}
	if request.Ipv6Prefix != nil {
		localVarQueryParams.Add("ipv6-prefix", openapi.ParameterToString(request.Ipv6Prefix, "multi"))
	}
	if request.ServedNfSetId != nil {
		localVarQueryParams.Add("served-nf-set-id", openapi.ParameterToString(request.ServedNfSetId, "multi"))
	}
	if request.RemotePlmnId != nil {
		localVarQueryParams.Add("remote-plmn-id", openapi.ParameterToString(request.RemotePlmnId, "application/json"))
	}
	if request.RemoteSnpnId != nil {
		localVarQueryParams.Add("remote-snpn-id", openapi.ParameterToString(request.RemoteSnpnId, "application/json"))
	}
	if request.DataForwarding != nil {
		localVarQueryParams.Add("data-forwarding", openapi.ParameterToString(request.DataForwarding, "multi"))
	}
	if request.PreferredFullPlmn != nil {
		localVarQueryParams.Add("preferred-full-plmn", openapi.ParameterToString(request.PreferredFullPlmn, "multi"))
	}
	if request.RequesterFeatures != nil {
		localVarQueryParams.Add("requester-features", openapi.ParameterToString(request.RequesterFeatures, "multi"))
	}
	if request.RealmId != nil {
		localVarQueryParams.Add("realm-id", openapi.ParameterToString(request.RealmId, "multi"))
	}
	if request.StorageId != nil {
		localVarQueryParams.Add("storage-id", openapi.ParameterToString(request.StorageId, "multi"))
	}
	if request.VsmfSupportInd != nil {
		localVarQueryParams.Add("vsmf-support-ind", openapi.ParameterToString(request.VsmfSupportInd, "multi"))
	}
	if request.IsmfSupportInd != nil {
		localVarQueryParams.Add("ismf-support-ind", openapi.ParameterToString(request.IsmfSupportInd, "multi"))
	}
	if request.NrfDiscUri != nil {
		localVarQueryParams.Add("nrf-disc-uri", openapi.ParameterToString(request.NrfDiscUri, "multi"))
	}
	if request.PreferredVendorSpecificFeatures != nil {
		localVarQueryParams.Add("preferred-vendor-specific-features", openapi.ParameterToString(request.PreferredVendorSpecificFeatures, "application/json"))
	}
	if request.PreferredVendorSpecificNfFeatures != nil {
		localVarQueryParams.Add("preferred-vendor-specific-nf-features", openapi.ParameterToString(request.PreferredVendorSpecificNfFeatures, "application/json"))
	}
	if request.RequiredPfcpFeatures != nil {
		localVarQueryParams.Add("required-pfcp-features", openapi.ParameterToString(request.RequiredPfcpFeatures, "multi"))
	}
	if request.HomePubKeyId != nil {
		localVarQueryParams.Add("home-pub-key-id", openapi.ParameterToString(request.HomePubKeyId, "multi"))
	}
	if request.ProseSupportInd != nil {
		localVarQueryParams.Add("prose-support-ind", openapi.ParameterToString(request.ProseSupportInd, "multi"))
	}
	if request.AnalyticsAggregationInd != nil {
		localVarQueryParams.Add("analytics-aggregation-ind", openapi.ParameterToString(request.AnalyticsAggregationInd, "multi"))
	}
	if request.ServingNfSetId != nil {
		localVarQueryParams.Add("serving-nf-set-id", openapi.ParameterToString(request.ServingNfSetId, "multi"))
	}
	if request.ServingNfType != nil {
		localVarQueryParams.Add("serving-nf-type", openapi.ParameterToString(request.ServingNfType, "multi"))
	}
	if request.MlAnalyticsInfoList != nil {
		if len(request.MlAnalyticsInfoList) < 1 {
			return &localVarReturnValue, openapi.ReportError("MlAnalyticsInfoList must have at least 1 elements")
		}
		localVarQueryParams.Add("ml-analytics-info-list", openapi.ParameterToString(request.MlAnalyticsInfoList, "application/json"))
	}
	if request.AnalyticsMetadataProvInd != nil {
		localVarQueryParams.Add("analytics-metadata-prov-ind", openapi.ParameterToString(request.AnalyticsMetadataProvInd, "multi"))
	}
	if request.NsacfCapability != nil {
		localVarQueryParams.Add("nsacf-capability", openapi.ParameterToString(request.NsacfCapability, "multi"))
	}
	if request.MbsSessionIdList != nil {
		if len(request.MbsSessionIdList) < 1 {
			return &localVarReturnValue, openapi.ReportError("MbsSessionIdList must have at least 1 elements")
		}
		localVarQueryParams.Add("mbs-session-id-list", openapi.ParameterToString(request.MbsSessionIdList, "application/json"))
	}
	if request.AreaSessionId != nil {
		localVarQueryParams.Add("area-session-id", openapi.ParameterToString(request.AreaSessionId, "multi"))
	}
	if request.GmlcNumber != nil {
		localVarQueryParams.Add("gmlc-number", openapi.ParameterToString(request.GmlcNumber, "multi"))
	}
	if request.UpfN6Ip != nil {
		localVarQueryParams.Add("upf-n6-ip", openapi.ParameterToString(request.UpfN6Ip, "application/json"))
	}
	if request.TaiList != nil {
		if len(request.TaiList) < 1 {
			return &localVarReturnValue, openapi.ReportError("TaiList must have at least 1 elements")
		}
		localVarQueryParams.Add("tai-list", openapi.ParameterToString(request.TaiList, "application/json"))
	}
	if request.PreferencesPrecedence != nil {
		if len(request.PreferencesPrecedence) < 2 {
			return &localVarReturnValue, openapi.ReportError("PreferencesPrecedence must have at least 2 elements")
		}
		localVarQueryParams.Add("preferences-precedence", openapi.ParameterToString(request.PreferencesPrecedence, "csv"))
	}
	if request.SupportOnboardingCapability != nil {
		localVarQueryParams.Add("support-onboarding-capability", openapi.ParameterToString(request.SupportOnboardingCapability, "multi"))
	}
	if request.UasNfFunctionalityInd != nil {
		localVarQueryParams.Add("uas-nf-functionality-ind", openapi.ParameterToString(request.UasNfFunctionalityInd, "multi"))
	}
	if request.V2xCapability != nil {
		localVarQueryParams.Add("v2x-capability", openapi.ParameterToString(request.V2xCapability, "application/json"))
	}
	if request.ProseCapability != nil {
		localVarQueryParams.Add("prose-capability", openapi.ParameterToString(request.ProseCapability, "application/json"))
	}
	if request.SharedDataId != nil {
		localVarQueryParams.Add("shared-data-id", openapi.ParameterToString(request.SharedDataId, "multi"))
	}
	if request.TargetHni != nil {
		if len(*request.TargetHni) < 4 {
			return &localVarReturnValue, openapi.ReportError("TargetHni must have at least 4 elements")
		}
		if len(*request.TargetHni) > 253 {
			return &localVarReturnValue, openapi.ReportError("TargetHni must have less than 253 elements")
		}
		localVarQueryParams.Add("target-hni", openapi.ParameterToString(request.TargetHni, "multi"))
	}
	if request.TargetNwResolution != nil {
		localVarQueryParams.Add("target-nw-resolution", openapi.ParameterToString(request.TargetNwResolution, "multi"))
	}
	if request.ExcludeNfinstList != nil {
		if len(request.ExcludeNfinstList) < 1 {
			return &localVarReturnValue, openapi.ReportError("ExcludeNfinstList must have at least 1 elements")
		}
		localVarQueryParams.Add("exclude-nfinst-list", openapi.ParameterToString(request.ExcludeNfinstList, "csv"))
	}
	if request.ExcludeNfservinstList != nil {
		if len(request.ExcludeNfservinstList) < 1 {
			return &localVarReturnValue, openapi.ReportError("ExcludeNfservinstList must have at least 1 elements")
		}
		localVarQueryParams.Add("exclude-nfservinst-list", openapi.ParameterToString(request.ExcludeNfservinstList, "application/json"))
	}
	if request.ExcludeNfservicesetList != nil {
		if len(request.ExcludeNfservicesetList) < 1 {
			return &localVarReturnValue, openapi.ReportError("ExcludeNfservicesetList must have at least 1 elements")
		}
		localVarQueryParams.Add("exclude-nfserviceset-list", openapi.ParameterToString(request.ExcludeNfservicesetList, "csv"))
	}
	if request.ExcludeNfsetList != nil {
		if len(request.ExcludeNfsetList) < 1 {
			return &localVarReturnValue, openapi.ReportError("ExcludeNfsetList must have at least 1 elements")
		}
		localVarQueryParams.Add("exclude-nfset-list", openapi.ParameterToString(request.ExcludeNfsetList, "csv"))
	}
	if request.PreferredAnalyticsDelays != nil {
		localVarQueryParams.Add("preferred-analytics-delays", openapi.ParameterToString(request.PreferredAnalyticsDelays, "application/json"))
	}
	if request.HighLatencyCom != nil {
		localVarQueryParams.Add("high-latency-com", openapi.ParameterToString(request.HighLatencyCom, "multi"))
	}
	if request.NsacSai != nil {
		localVarQueryParams.Add("nsac-sai", openapi.ParameterToString(request.NsacSai, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if request.AcceptEncoding != nil {
		localVarHeaderParams["Accept-Encoding"] = openapi.ParameterToString(request.AcceptEncoding, "csv")
	}

	if request.IfNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = openapi.ParameterToString(request.IfNoneMatch, "csv")
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.SearchResult, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		localVarReturnValue.ETag = localVarHTTPResponse.Header.Get("ETag")
		localVarReturnValue.ContentEncoding = localVarHTTPResponse.Header.Get("Content-Encoding")
		return &localVarReturnValue, nil
	case 307:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		v.Location = localVarHTTPResponse.Header.Get("Location")
		apiError.ErrorModel = v
		return nil, apiError
	case 308:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.RedirectResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		v.Location = localVarHTTPResponse.Header.Get("Location")
		apiError.ErrorModel = v
		return nil, apiError
	case 400:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 406:
		return &localVarReturnValue, nil
	case 411:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 415:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 501:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v SearchNFInstancesError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
