/*
 * Nchf_OfflineOnlyCharging
 *
 * OfflineOnlyCharging Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * Source file: 3GPP TS 32.291  V17.0.0: Telecommunication management; Charging management;  5G system, charging service; Stage 3.
 * Url: http://www.3gpp.org/ftp/Specs/archive/32_series/32.291/
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package OfflineOnlyCharging

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type DefaultApiService service

/*
DefaultApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param OfflineChargingDataRef - a unique identifier for a charging data resource in a PLMN
 * @param ChfOfflineOnlyChargingChargingDataRequest -

@return OfflinechargingdataOfflineChargingDataRefReleasePostResponse
*/

// OfflinechargingdataOfflineChargingDataRefReleasePostRequest
type OfflinechargingdataOfflineChargingDataRefReleasePostRequest struct {
	OfflineChargingDataRef                    *string
	ChfOfflineOnlyChargingChargingDataRequest *models.ChfOfflineOnlyChargingChargingDataRequest
}

func (r *OfflinechargingdataOfflineChargingDataRefReleasePostRequest) SetOfflineChargingDataRef(OfflineChargingDataRef string) {
	r.OfflineChargingDataRef = &OfflineChargingDataRef
}
func (r *OfflinechargingdataOfflineChargingDataRefReleasePostRequest) SetChfOfflineOnlyChargingChargingDataRequest(ChfOfflineOnlyChargingChargingDataRequest models.ChfOfflineOnlyChargingChargingDataRequest) {
	r.ChfOfflineOnlyChargingChargingDataRequest = &ChfOfflineOnlyChargingChargingDataRequest
}

type OfflinechargingdataOfflineChargingDataRefReleasePostResponse struct {
}

type OfflinechargingdataOfflineChargingDataRefReleasePostError struct {
	ProblemDetails models.ProblemDetails
}

func (a *DefaultApiService) OfflinechargingdataOfflineChargingDataRefReleasePost(ctx context.Context, request *OfflinechargingdataOfflineChargingDataRefReleasePostRequest) (*OfflinechargingdataOfflineChargingDataRefReleasePostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OfflinechargingdataOfflineChargingDataRefReleasePostResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/offlinechargingdata/{OfflineChargingDataRef}/release"
	localVarPath = strings.Replace(localVarPath, "{"+"OfflineChargingDataRef"+"}", openapi.StringOfValue(*request.OfflineChargingDataRef), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.ChfOfflineOnlyChargingChargingDataRequest

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 404:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 410:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v OfflinechargingdataOfflineChargingDataRefReleasePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
DefaultApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param OfflineChargingDataRef - a unique identifier for a charging data resource in a PLMN
 * @param ChfOfflineOnlyChargingChargingDataRequest -

@return OfflinechargingdataOfflineChargingDataRefUpdatePostResponse
*/

// OfflinechargingdataOfflineChargingDataRefUpdatePostRequest
type OfflinechargingdataOfflineChargingDataRefUpdatePostRequest struct {
	OfflineChargingDataRef                    *string
	ChfOfflineOnlyChargingChargingDataRequest *models.ChfOfflineOnlyChargingChargingDataRequest
}

func (r *OfflinechargingdataOfflineChargingDataRefUpdatePostRequest) SetOfflineChargingDataRef(OfflineChargingDataRef string) {
	r.OfflineChargingDataRef = &OfflineChargingDataRef
}
func (r *OfflinechargingdataOfflineChargingDataRefUpdatePostRequest) SetChfOfflineOnlyChargingChargingDataRequest(ChfOfflineOnlyChargingChargingDataRequest models.ChfOfflineOnlyChargingChargingDataRequest) {
	r.ChfOfflineOnlyChargingChargingDataRequest = &ChfOfflineOnlyChargingChargingDataRequest
}

type OfflinechargingdataOfflineChargingDataRefUpdatePostResponse struct {
	ChfOfflineOnlyChargingChargingDataResponse models.ChfOfflineOnlyChargingChargingDataResponse
}

type OfflinechargingdataOfflineChargingDataRefUpdatePostError struct {
	ProblemDetails models.ProblemDetails
}

func (a *DefaultApiService) OfflinechargingdataOfflineChargingDataRefUpdatePost(ctx context.Context, request *OfflinechargingdataOfflineChargingDataRefUpdatePostRequest) (*OfflinechargingdataOfflineChargingDataRefUpdatePostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OfflinechargingdataOfflineChargingDataRefUpdatePostResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/offlinechargingdata/{OfflineChargingDataRef}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"OfflineChargingDataRef"+"}", openapi.StringOfValue(*request.OfflineChargingDataRef), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.ChfOfflineOnlyChargingChargingDataRequest

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.ChfOfflineOnlyChargingChargingDataResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 400:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 410:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v OfflinechargingdataOfflineChargingDataRefUpdatePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
DefaultApiService
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ChfOfflineOnlyChargingChargingDataRequest -

@return OfflinechargingdataPostResponse
*/

// OfflinechargingdataPostRequest
type OfflinechargingdataPostRequest struct {
	ChfOfflineOnlyChargingChargingDataRequest *models.ChfOfflineOnlyChargingChargingDataRequest
}

func (r *OfflinechargingdataPostRequest) SetChfOfflineOnlyChargingChargingDataRequest(ChfOfflineOnlyChargingChargingDataRequest models.ChfOfflineOnlyChargingChargingDataRequest) {
	r.ChfOfflineOnlyChargingChargingDataRequest = &ChfOfflineOnlyChargingChargingDataRequest
}

type OfflinechargingdataPostResponse struct {
	ChfOfflineOnlyChargingChargingDataResponse models.ChfOfflineOnlyChargingChargingDataResponse
}

type OfflinechargingdataPostError struct {
	ProblemDetails models.ProblemDetails
}

func (a *DefaultApiService) OfflinechargingdataPost(ctx context.Context, request *OfflinechargingdataPostRequest) (*OfflinechargingdataPostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  OfflinechargingdataPostResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/offlinechargingdata"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.ChfOfflineOnlyChargingChargingDataRequest

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 201:
		err = openapi.Deserialize(&localVarReturnValue.ChfOfflineOnlyChargingChargingDataResponse, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 400:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 410:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v OfflinechargingdataPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
