/*
 * 3gpp-as-session-with-qos
 *
 * API for setting us an AS session with required QoS.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.122 V17.9.0 T8 reference point for Northbound APIs
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.122/
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package AsSessionWithQoS

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type ASSessionWithRequiredQoSSubscriptionsApiService service

/*
ASSessionWithRequiredQoSSubscriptionsApiService Creates a new subscription resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param AsSessionWithQoSSubscription - Request to create a new subscription resource

@return CreateASSessionWithQoSSubscriptionResponse
*/

// CreateASSessionWithQoSSubscriptionRequest
type CreateASSessionWithQoSSubscriptionRequest struct {
	ScsAsId                      *string
	AsSessionWithQoSSubscription *models.AsSessionWithQoSSubscription
}

func (r *CreateASSessionWithQoSSubscriptionRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *CreateASSessionWithQoSSubscriptionRequest) SetAsSessionWithQoSSubscription(AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription) {
	r.AsSessionWithQoSSubscription = &AsSessionWithQoSSubscription
}

type CreateASSessionWithQoSSubscriptionResponse struct {
	Location                     string
	AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription
}

type CreateASSessionWithQoSSubscriptionError struct {
	ProblemDetails models.ProblemDetails
}

func (a *ASSessionWithRequiredQoSSubscriptionsApiService) CreateASSessionWithQoSSubscription(ctx context.Context, request *CreateASSessionWithQoSSubscriptionRequest) (*CreateASSessionWithQoSSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Post")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateASSessionWithQoSSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.AsSessionWithQoSSubscription

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 201:
		err = openapi.Deserialize(&localVarReturnValue.AsSessionWithQoSSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.Location = localVarHTTPResponse.Header.Get("Location")
		return &localVarReturnValue, nil
	case 400:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 415:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v CreateASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

// CreateASSessionWithQoSSubscriptionNotificationDestinationPostRequest
type CreateASSessionWithQoSSubscriptionNotificationDestinationPostRequest struct {
	UserPlaneNotificationData *models.UserPlaneNotificationData
}

func (r *CreateASSessionWithQoSSubscriptionNotificationDestinationPostRequest) SetUserPlaneNotificationData(UserPlaneNotificationData models.UserPlaneNotificationData) {
	r.UserPlaneNotificationData = &UserPlaneNotificationData
}

type CreateASSessionWithQoSSubscriptionNotificationDestinationPostResponse struct {
}

type CreateASSessionWithQoSSubscriptionNotificationDestinationPostError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *ASSessionWithRequiredQoSSubscriptionsApiService) CreateASSessionWithQoSSubscriptionNotificationDestinationPost(ctx context.Context, uri string, request *CreateASSessionWithQoSSubscriptionNotificationDestinationPostRequest) (*CreateASSessionWithQoSSubscriptionNotificationDestinationPostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("POST")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateASSessionWithQoSSubscriptionNotificationDestinationPostResponse
	)

	// create path and map variables
	localVarPath := uri

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.UserPlaneNotificationData

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 415:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v CreateASSessionWithQoSSubscriptionNotificationDestinationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return &localVarReturnValue, nil
	}
}

/*
ASSessionWithRequiredQoSSubscriptionsApiService Read all or queried active subscriptions for the SCS/AS.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param IpAddrs - The IP address(es) of the requested UE(s).
 * @param IpDomain - The IPv4 address domain identifier. The attribute may only be provided if IPv4 address is included in the ip-addrs query parameter.
 * @param MacAddrs - The MAC address(es) of the requested UE(s).

@return FetchAllASSessionWithQoSSubscriptionsResponse
*/

// FetchAllASSessionWithQoSSubscriptionsRequest
type FetchAllASSessionWithQoSSubscriptionsRequest struct {
	ScsAsId  *string
	IpAddrs  []models.IpAddr
	IpDomain *string
	MacAddrs []string
}

func (r *FetchAllASSessionWithQoSSubscriptionsRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *FetchAllASSessionWithQoSSubscriptionsRequest) SetIpAddrs(IpAddrs []models.IpAddr) {
	r.IpAddrs = IpAddrs
}
func (r *FetchAllASSessionWithQoSSubscriptionsRequest) SetIpDomain(IpDomain string) {
	r.IpDomain = &IpDomain
}
func (r *FetchAllASSessionWithQoSSubscriptionsRequest) SetMacAddrs(MacAddrs []string) {
	r.MacAddrs = MacAddrs
}

type FetchAllASSessionWithQoSSubscriptionsResponse struct {
	AsSessionWithQoSSubscription []models.AsSessionWithQoSSubscription
}

type FetchAllASSessionWithQoSSubscriptionsError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *ASSessionWithRequiredQoSSubscriptionsApiService) FetchAllASSessionWithQoSSubscriptions(ctx context.Context, request *FetchAllASSessionWithQoSSubscriptionsRequest) (*FetchAllASSessionWithQoSSubscriptionsResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FetchAllASSessionWithQoSSubscriptionsResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.IpAddrs != nil {
		if len(request.IpAddrs) < 1 {
			return &localVarReturnValue, openapi.ReportError("IpAddrs must have at least 1 elements")
		}
		localVarQueryParams.Add("ip-addrs", openapi.ParameterToString(request.IpAddrs, "application/json"))
	}
	if request.IpDomain != nil {
		localVarQueryParams.Add("ip-domain", openapi.ParameterToString(request.IpDomain, "multi"))
	}
	if request.MacAddrs != nil {
		if len(request.MacAddrs) < 1 {
			return &localVarReturnValue, openapi.ReportError("MacAddrs must have at least 1 elements")
		}
		localVarQueryParams.Add("mac-addrs", openapi.ParameterToString(request.MacAddrs, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.AsSessionWithQoSSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 406:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v FetchAllASSessionWithQoSSubscriptionsError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
