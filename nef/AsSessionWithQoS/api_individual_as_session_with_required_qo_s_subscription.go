/*
 * 3gpp-as-session-with-qos
 *
 * API for setting us an AS session with required QoS.   Â© 2023, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.122 V17.9.0 T8 reference point for Northbound APIs
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.122/
 *
 * API version: 1.2.3
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package AsSessionWithQoS

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type IndividualASSessionWithRequiredQoSSubscriptionApiService service

/*
IndividualASSessionWithRequiredQoSSubscriptionApiService Deletes an already existing subscription.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param SubscriptionId - Identifier of the subscription resource

@return DeleteIndASSessionWithQoSSubscriptionResponse
*/

// DeleteIndASSessionWithQoSSubscriptionRequest
type DeleteIndASSessionWithQoSSubscriptionRequest struct {
	ScsAsId        *string
	SubscriptionId *string
}

func (r *DeleteIndASSessionWithQoSSubscriptionRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *DeleteIndASSessionWithQoSSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}

type DeleteIndASSessionWithQoSSubscriptionResponse struct {
	UserPlaneNotificationData models.UserPlaneNotificationData
}

type DeleteIndASSessionWithQoSSubscriptionError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *IndividualASSessionWithRequiredQoSSubscriptionApiService) DeleteIndASSessionWithQoSSubscription(ctx context.Context, request *DeleteIndASSessionWithQoSSubscriptionRequest) (*DeleteIndASSessionWithQoSSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeleteIndASSessionWithQoSSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.UserPlaneNotificationData, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v DeleteIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
IndividualASSessionWithRequiredQoSSubscriptionApiService Read an active subscriptions for the SCS/AS and the subscription Id.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param SubscriptionId - Identifier of the subscription resource

@return FetchIndASSessionWithQoSSubscriptionResponse
*/

// FetchIndASSessionWithQoSSubscriptionRequest
type FetchIndASSessionWithQoSSubscriptionRequest struct {
	ScsAsId        *string
	SubscriptionId *string
}

func (r *FetchIndASSessionWithQoSSubscriptionRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *FetchIndASSessionWithQoSSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}

type FetchIndASSessionWithQoSSubscriptionResponse struct {
	AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription
}

type FetchIndASSessionWithQoSSubscriptionError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *IndividualASSessionWithRequiredQoSSubscriptionApiService) FetchIndASSessionWithQoSSubscription(ctx context.Context, request *FetchIndASSessionWithQoSSubscriptionRequest) (*FetchIndASSessionWithQoSSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FetchIndASSessionWithQoSSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.AsSessionWithQoSSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 406:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v FetchIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
IndividualASSessionWithRequiredQoSSubscriptionApiService Updates/replaces an existing subscription resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param SubscriptionId - Identifier of the subscription resource
 * @param AsSessionWithQoSSubscriptionPatch -

@return ModifyIndASSessionWithQoSSubscriptionResponse
*/

// ModifyIndASSessionWithQoSSubscriptionRequest
type ModifyIndASSessionWithQoSSubscriptionRequest struct {
	ScsAsId                           *string
	SubscriptionId                    *string
	AsSessionWithQoSSubscriptionPatch *models.AsSessionWithQoSSubscriptionPatch
}

func (r *ModifyIndASSessionWithQoSSubscriptionRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *ModifyIndASSessionWithQoSSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *ModifyIndASSessionWithQoSSubscriptionRequest) SetAsSessionWithQoSSubscriptionPatch(AsSessionWithQoSSubscriptionPatch models.AsSessionWithQoSSubscriptionPatch) {
	r.AsSessionWithQoSSubscriptionPatch = &AsSessionWithQoSSubscriptionPatch
}

type ModifyIndASSessionWithQoSSubscriptionResponse struct {
	AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription
}

type ModifyIndASSessionWithQoSSubscriptionError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *IndividualASSessionWithRequiredQoSSubscriptionApiService) ModifyIndASSessionWithQoSSubscription(ctx context.Context, request *ModifyIndASSessionWithQoSSubscriptionRequest) (*ModifyIndASSessionWithQoSSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Patch")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ModifyIndASSessionWithQoSSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/merge-patch+json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.AsSessionWithQoSSubscriptionPatch

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.AsSessionWithQoSSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 204:
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 415:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v ModifyIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
IndividualASSessionWithRequiredQoSSubscriptionApiService Updates/replaces an existing subscription resource.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param ScsAsId - Identifier of the SCS/AS
 * @param SubscriptionId - Identifier of the subscription resource
 * @param AsSessionWithQoSSubscription - Parameters to update/replace the existing subscription

@return UpdateIndASSessionWithQoSSubscriptionResponse
*/

// UpdateIndASSessionWithQoSSubscriptionRequest
type UpdateIndASSessionWithQoSSubscriptionRequest struct {
	ScsAsId                      *string
	SubscriptionId               *string
	AsSessionWithQoSSubscription *models.AsSessionWithQoSSubscription
}

func (r *UpdateIndASSessionWithQoSSubscriptionRequest) SetScsAsId(ScsAsId string) {
	r.ScsAsId = &ScsAsId
}
func (r *UpdateIndASSessionWithQoSSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *UpdateIndASSessionWithQoSSubscriptionRequest) SetAsSessionWithQoSSubscription(AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription) {
	r.AsSessionWithQoSSubscription = &AsSessionWithQoSSubscription
}

type UpdateIndASSessionWithQoSSubscriptionResponse struct {
	AsSessionWithQoSSubscription models.AsSessionWithQoSSubscription
}

type UpdateIndASSessionWithQoSSubscriptionError struct {
	Location       string
	ProblemDetails models.ProblemDetails
}

func (a *IndividualASSessionWithRequiredQoSSubscriptionApiService) UpdateIndASSessionWithQoSSubscription(ctx context.Context, request *UpdateIndASSessionWithQoSSubscriptionRequest) (*UpdateIndASSessionWithQoSSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateIndASSessionWithQoSSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{scsAsId}/subscriptions/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"scsAsId"+"}", openapi.StringOfValue(*request.ScsAsId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.AsSessionWithQoSSubscription

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.AsSessionWithQoSSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 204:
		return &localVarReturnValue, nil
	case 307:
		return &localVarReturnValue, nil
	case 308:
		return &localVarReturnValue, nil
	case 400:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 411:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 413:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 415:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 429:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v UpdateIndASSessionWithQoSSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
