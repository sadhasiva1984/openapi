/*
 * Nudsf_DataRepository
 *
 * Nudsf Data Repository Service.   Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC).   All rights reserved.
 *
 * Source file: 3GPP TS 29.598 UDSF Services, V17.6.0.
 * Url: https://www.3gpp.org/ftp/Specs/archive/29_series/29.598/
 *
 * API version: 1.1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package DataRepository

import (
	"github.com/sadhasiva1984/openapi"
	"github.com/sadhasiva1984/openapi/models"

	"context"
	"io/ioutil"
	"net/url"
	"strings"
)

// Linger please
var (
	_ context.Context
)

type NotificationSubscriptionCRUDApiService service

/*
NotificationSubscriptionCRUDApiService NotificationSubscription Create/Update
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param RealmId - Identifier of the Realm
 * @param StorageId - Identifier of the Storage
 * @param SubscriptionId - Identifier of the NotificationSubscription
 * @param NotificationSubscription -
 * @param SupportedFeatures - Features required to be supported by the target NF
 * @param IfNoneMatch - Validator for conditional requests, as described in RFC 7232, 3.2
 * @param IfMatch - Record validator for conditional requests, as described in RFC 7232, 3.2

@return CreateAndUpdateNotificationSubscriptionResponse
*/

// CreateAndUpdateNotificationSubscriptionRequest
type CreateAndUpdateNotificationSubscriptionRequest struct {
	RealmId                  *string
	StorageId                *string
	SubscriptionId           *string
	NotificationSubscription *models.NotificationSubscription
	SupportedFeatures        *string
	IfNoneMatch              *string
	IfMatch                  *string
}

func (r *CreateAndUpdateNotificationSubscriptionRequest) SetRealmId(RealmId string) {
	r.RealmId = &RealmId
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetStorageId(StorageId string) {
	r.StorageId = &StorageId
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetNotificationSubscription(NotificationSubscription models.NotificationSubscription) {
	r.NotificationSubscription = &NotificationSubscription
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetIfNoneMatch(IfNoneMatch string) {
	r.IfNoneMatch = &IfNoneMatch
}
func (r *CreateAndUpdateNotificationSubscriptionRequest) SetIfMatch(IfMatch string) {
	r.IfMatch = &IfMatch
}

type CreateAndUpdateNotificationSubscriptionResponse struct {
	CacheControl             string
	ETag                     string
	LastModified             string
	Location                 string
	NotificationSubscription models.NotificationSubscription
}

type CreateAndUpdateNotificationSubscriptionError struct {
	CacheControl   string
	ETag           string
	RetryAfter     interface{}
	ProblemDetails models.ProblemDetails
	string         []string
}

func (a *NotificationSubscriptionCRUDApiService) CreateAndUpdateNotificationSubscription(ctx context.Context, request *CreateAndUpdateNotificationSubscriptionRequest) (*CreateAndUpdateNotificationSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Put")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateAndUpdateNotificationSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{realmId}/{storageId}/subs-to-notify/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"realmId"+"}", openapi.StringOfValue(*request.RealmId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", openapi.StringOfValue(*request.StorageId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if request.IfNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = openapi.ParameterToString(request.IfNoneMatch, "csv")
	}

	if request.IfMatch != nil {
		localVarHeaderParams["If-Match"] = openapi.ParameterToString(request.IfMatch, "csv")
	}

	// body params
	localVarPostBody = request.NotificationSubscription

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.NotificationSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 201:
		err = openapi.Deserialize(&localVarReturnValue.NotificationSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.Location = localVarHTTPResponse.Header.Get("Location")
		localVarReturnValue.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		localVarReturnValue.ETag = localVarHTTPResponse.Header.Get("ETag")
		localVarReturnValue.LastModified = localVarHTTPResponse.Header.Get("Last-Modified")
		return &localVarReturnValue, nil
	case 304:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		v.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		v.ETag = localVarHTTPResponse.Header.Get("ETag")
		v.RetryAfter = localVarHTTPResponse.Header.Get("Retry-After")
		apiError.ErrorModel = v
		return nil, apiError
	case 400:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 408:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 409:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.string, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 412:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v CreateAndUpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

// CreateAndUpdateNotificationSubscriptionOnDataChangePostRequest
type CreateAndUpdateNotificationSubscriptionOnDataChangePostRequest struct {
	RecordNotification *models.RecordNotification
}

func (r *CreateAndUpdateNotificationSubscriptionOnDataChangePostRequest) SetRecordNotification(RecordNotification models.RecordNotification) {
	r.RecordNotification = &RecordNotification
}

type CreateAndUpdateNotificationSubscriptionOnDataChangePostResponse struct {
}

type CreateAndUpdateNotificationSubscriptionOnDataChangePostError struct {
	ProblemDetails models.ProblemDetails
}

func (a *NotificationSubscriptionCRUDApiService) CreateAndUpdateNotificationSubscriptionOnDataChangePost(ctx context.Context, uri string, request *CreateAndUpdateNotificationSubscriptionOnDataChangePostRequest) (*CreateAndUpdateNotificationSubscriptionOnDataChangePostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("POST")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateAndUpdateNotificationSubscriptionOnDataChangePostResponse
	)

	// create path and map variables
	localVarPath := uri

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"multipart/mixed"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.RecordNotification

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 400:
		var v CreateAndUpdateNotificationSubscriptionOnDataChangePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v CreateAndUpdateNotificationSubscriptionOnDataChangePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v CreateAndUpdateNotificationSubscriptionOnDataChangePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v CreateAndUpdateNotificationSubscriptionOnDataChangePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v CreateAndUpdateNotificationSubscriptionOnDataChangePostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return &localVarReturnValue, nil
	}
}

// CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostRequest
type CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostRequest struct {
	UdsfDataRepositoryNotificationInfo *models.UdsfDataRepositoryNotificationInfo
}

func (r *CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostRequest) SetUdsfDataRepositoryNotificationInfo(UdsfDataRepositoryNotificationInfo models.UdsfDataRepositoryNotificationInfo) {
	r.UdsfDataRepositoryNotificationInfo = &UdsfDataRepositoryNotificationInfo
}

type CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostResponse struct {
}

type CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError struct {
	ProblemDetails models.ProblemDetails
}

func (a *NotificationSubscriptionCRUDApiService) CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPost(ctx context.Context, uri string, request *CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostRequest) (*CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("POST")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostResponse
	)

	// create path and map variables
	localVarPath := uri

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	// body params
	localVarPostBody = request.UdsfDataRepositoryNotificationInfo

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 204:
		return &localVarReturnValue, nil
	case 400:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v CreateAndUpdateNotificationSubscriptionSubscriptionExpiryNotificationPostError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return &localVarReturnValue, nil
	}
}

/*
NotificationSubscriptionCRUDApiService Delete a Notification Subscription of the storage
delete a single subscriptions of the storage
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param RealmId - Identifier of the Realm
 * @param StorageId - Identifier of the Storage
 * @param SubscriptionId - Identifier of the NotificationSubscription
 * @param ClientId - Identifies the NF or NFSet
 * @param GetPrevious - Retrieve the NotificationSubscription before delete
 * @param IfMatch - Record validator for conditional requests, as described in RFC 7232, 3.2
 * @param SupportedFeatures - Features required to be supported by the target NF

@return DeleteNotificationSubscriptionResponse
*/

// DeleteNotificationSubscriptionRequest
type DeleteNotificationSubscriptionRequest struct {
	RealmId           *string
	StorageId         *string
	SubscriptionId    *string
	ClientId          *models.ClientId
	GetPrevious       *bool
	IfMatch           *string
	SupportedFeatures *string
}

func (r *DeleteNotificationSubscriptionRequest) SetRealmId(RealmId string) {
	r.RealmId = &RealmId
}
func (r *DeleteNotificationSubscriptionRequest) SetStorageId(StorageId string) {
	r.StorageId = &StorageId
}
func (r *DeleteNotificationSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *DeleteNotificationSubscriptionRequest) SetClientId(ClientId models.ClientId) {
	r.ClientId = &ClientId
}
func (r *DeleteNotificationSubscriptionRequest) SetGetPrevious(GetPrevious bool) {
	r.GetPrevious = &GetPrevious
}
func (r *DeleteNotificationSubscriptionRequest) SetIfMatch(IfMatch string) {
	r.IfMatch = &IfMatch
}
func (r *DeleteNotificationSubscriptionRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type DeleteNotificationSubscriptionResponse struct {
	NotificationSubscription []models.NotificationSubscription
}

type DeleteNotificationSubscriptionError struct {
	NotificationSubscription models.NotificationSubscription
	ProblemDetails           models.ProblemDetails
}

func (a *NotificationSubscriptionCRUDApiService) DeleteNotificationSubscription(ctx context.Context, request *DeleteNotificationSubscriptionRequest) (*DeleteNotificationSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Delete")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DeleteNotificationSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{realmId}/{storageId}/subs-to-notify/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"realmId"+"}", openapi.StringOfValue(*request.RealmId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", openapi.StringOfValue(*request.StorageId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.ClientId == nil {
		return nil, openapi.ReportError("ClientId must be non nil")
	} else {
		localVarQueryParams.Add("client-id", openapi.ParameterToString(request.ClientId, "multi"))
	}
	if request.GetPrevious != nil {
		localVarQueryParams.Add("get-previous", openapi.ParameterToString(request.GetPrevious, "multi"))
	}
	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if request.IfMatch != nil {
		localVarHeaderParams["If-Match"] = openapi.ParameterToString(request.IfMatch, "csv")
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.NotificationSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		return &localVarReturnValue, nil
	case 204:
		return &localVarReturnValue, nil
	case 400:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 408:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 412:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.NotificationSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v DeleteNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
NotificationSubscriptionCRUDApiService Notification subscription retrieval
retrieve a single notification subscription of the storage
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param RealmId - Identifier of the Realm
 * @param StorageId - Identifier of the Storage
 * @param SubscriptionId - Identifier of the NotificationSubscription
 * @param SupportedFeatures - Features required to be supported by the target NF
 * @param IfNoneMatch - Validator for conditional requests, as described in RFC 7232, 3.2
 * @param IfModifiedSince - Validator for conditional requests, as described in RFC 7232, 3.3

@return GetNotificationSubscriptionResponse
*/

// GetNotificationSubscriptionRequest
type GetNotificationSubscriptionRequest struct {
	RealmId           *string
	StorageId         *string
	SubscriptionId    *string
	SupportedFeatures *string
	IfNoneMatch       *string
	IfModifiedSince   *string
}

func (r *GetNotificationSubscriptionRequest) SetRealmId(RealmId string) {
	r.RealmId = &RealmId
}
func (r *GetNotificationSubscriptionRequest) SetStorageId(StorageId string) {
	r.StorageId = &StorageId
}
func (r *GetNotificationSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *GetNotificationSubscriptionRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}
func (r *GetNotificationSubscriptionRequest) SetIfNoneMatch(IfNoneMatch string) {
	r.IfNoneMatch = &IfNoneMatch
}
func (r *GetNotificationSubscriptionRequest) SetIfModifiedSince(IfModifiedSince string) {
	r.IfModifiedSince = &IfModifiedSince
}

type GetNotificationSubscriptionResponse struct {
	CacheControl             string
	ETag                     string
	LastModified             string
	NotificationSubscription models.NotificationSubscription
}

type GetNotificationSubscriptionError struct {
	CacheControl   string
	ETag           string
	RetryAfter     interface{}
	ProblemDetails models.ProblemDetails
}

func (a *NotificationSubscriptionCRUDApiService) GetNotificationSubscription(ctx context.Context, request *GetNotificationSubscriptionRequest) (*GetNotificationSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Get")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  GetNotificationSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{realmId}/{storageId}/subs-to-notify/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"realmId"+"}", openapi.StringOfValue(*request.RealmId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", openapi.StringOfValue(*request.StorageId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}

	localVarHTTPContentTypes := []string{"application/json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if request.IfNoneMatch != nil {
		localVarHeaderParams["If-None-Match"] = openapi.ParameterToString(request.IfNoneMatch, "csv")
	}

	if request.IfModifiedSince != nil {
		localVarHeaderParams["If-Modified-Since"] = openapi.ParameterToString(request.IfModifiedSince, "csv")
	}

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.NotificationSubscription, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		localVarReturnValue.ETag = localVarHTTPResponse.Header.Get("ETag")
		localVarReturnValue.LastModified = localVarHTTPResponse.Header.Get("Last-Modified")
		return &localVarReturnValue, nil
	case 304:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		v.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		v.ETag = localVarHTTPResponse.Header.Get("ETag")
		v.RetryAfter = localVarHTTPResponse.Header.Get("Retry-After")
		apiError.ErrorModel = v
		return nil, apiError
	case 400:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v GetNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}

/*
NotificationSubscriptionCRUDApiService NotificationSubscription update
update a specific NotificationSubscription
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param RealmId - Identifier of the Realm
 * @param StorageId - Identifier of the Storage
 * @param SubscriptionId - Identifier of the NotificationSubscription
 * @param PatchItem - data to patch
 * @param IfMatch - Validator for conditional requests, as described in RFC 7232, 3.2
 * @param SupportedFeatures - Features required to be supported by the target NF

@return UpdateNotificationSubscriptionResponse
*/

// UpdateNotificationSubscriptionRequest
type UpdateNotificationSubscriptionRequest struct {
	RealmId           *string
	StorageId         *string
	SubscriptionId    *string
	PatchItem         []models.PatchItem
	IfMatch           *string
	SupportedFeatures *string
}

func (r *UpdateNotificationSubscriptionRequest) SetRealmId(RealmId string) {
	r.RealmId = &RealmId
}
func (r *UpdateNotificationSubscriptionRequest) SetStorageId(StorageId string) {
	r.StorageId = &StorageId
}
func (r *UpdateNotificationSubscriptionRequest) SetSubscriptionId(SubscriptionId string) {
	r.SubscriptionId = &SubscriptionId
}
func (r *UpdateNotificationSubscriptionRequest) SetPatchItem(PatchItem []models.PatchItem) {
	r.PatchItem = PatchItem
}
func (r *UpdateNotificationSubscriptionRequest) SetIfMatch(IfMatch string) {
	r.IfMatch = &IfMatch
}
func (r *UpdateNotificationSubscriptionRequest) SetSupportedFeatures(SupportedFeatures string) {
	r.SupportedFeatures = &SupportedFeatures
}

type UpdateNotificationSubscriptionResponse struct {
	CacheControl string
	ETag         string
	LastModified string
	PatchResult  models.PatchResult
}

type UpdateNotificationSubscriptionError struct {
	CacheControl   string
	ETag           string
	RetryAfter     interface{}
	ProblemDetails models.ProblemDetails
}

func (a *NotificationSubscriptionCRUDApiService) UpdateNotificationSubscription(ctx context.Context, request *UpdateNotificationSubscriptionRequest) (*UpdateNotificationSubscriptionResponse, error) {
	var (
		localVarHTTPMethod   = strings.ToUpper("Patch")
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpdateNotificationSubscriptionResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath() + "/{realmId}/{storageId}/subs-to-notify/{subscriptionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"realmId"+"}", openapi.StringOfValue(*request.RealmId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"storageId"+"}", openapi.StringOfValue(*request.StorageId), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"subscriptionId"+"}", openapi.StringOfValue(*request.SubscriptionId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if request.SupportedFeatures != nil {
		localVarQueryParams.Add("supported-features", openapi.ParameterToString(request.SupportedFeatures, "multi"))
	}
	localVarHTTPContentTypes := []string{"application/json-patch+json"}

	localVarHeaderParams["Content-Type"] = localVarHTTPContentTypes[0] // use the first content type specified in 'consumes'

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/problem+json"}

	// set Accept header
	localVarHTTPHeaderAccept := strings.Join(localVarHTTPHeaderAccepts, ", ")
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}

	if request.IfMatch != nil {
		localVarHeaderParams["If-Match"] = openapi.ParameterToString(request.IfMatch, "csv")
	}

	// body params
	localVarPostBody = request.PatchItem

	r, err := openapi.PrepareRequest(ctx, a.client.cfg, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := openapi.CallAPI(a.client.cfg, r)
	if err != nil || localVarHTTPResponse == nil {
		return nil, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	if err != nil {
		return nil, err
	}
	err = localVarHTTPResponse.Body.Close()
	if err != nil {
		return nil, err
	}

	apiError := openapi.GenericOpenAPIError{
		RawBody:     localVarBody,
		ErrorStatus: localVarHTTPResponse.StatusCode,
	}

	switch localVarHTTPResponse.StatusCode {
	case 200:
		err = openapi.Deserialize(&localVarReturnValue.PatchResult, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		localVarReturnValue.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		localVarReturnValue.ETag = localVarHTTPResponse.Header.Get("ETag")
		localVarReturnValue.LastModified = localVarHTTPResponse.Header.Get("Last-Modified")
		return &localVarReturnValue, nil
	case 204:
		return &localVarReturnValue, nil
	case 304:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		v.CacheControl = localVarHTTPResponse.Header.Get("Cache-Control")
		v.ETag = localVarHTTPResponse.Header.Get("ETag")
		v.RetryAfter = localVarHTTPResponse.Header.Get("Retry-After")
		apiError.ErrorModel = v
		return nil, apiError
	case 400:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 401:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 403:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 404:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 408:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 500:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	case 503:
		var v UpdateNotificationSubscriptionError
		err = openapi.Deserialize(&v.ProblemDetails, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			return nil, err
		}
		apiError.ErrorModel = v
		return nil, apiError
	default:
		return nil, apiError
	}
}
